//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.05.22 at 11:20:22 PM BST 
//


package com.mei.ergosurgeon.load.data.entities;

import com.mei.ergosurgeon.load.business.api.KafkaLoadService;
import com.mei.ergosurgeon.load.business.utils.AvroFilesUtil;
import com.mei.ergosurgeon.load.business.utils.KafkaTemplatesUtil;
import com.mei.ergosurgeon.load.data.entities.custom.KafkaTopic;
import com.mei.ergosurgeon.load.data.entities.custom.Vector;
import org.apache.avro.generic.GenericContainer;
import org.springframework.kafka.core.KafkaTemplate;

import javax.xml.bind.annotation.*;
import java.io.File;

import static com.mei.ergosurgeon.load.common.IlegalStateExceptionEnum.AVRO_INDEX_RECORD_GET;
import static com.mei.ergosurgeon.load.common.IlegalStateExceptionEnum.AVRO_INDEX_RECORD_PUT;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name = "point")
public class Point implements GenericContainer, KafkaTopic<Point> {
    @XmlElement(name = "pos_s", required = true)
    protected String posS;

    @XmlAttribute(name = "label", required = true)
    protected String label;

    private Vector position;

    public String getPosS() {
        return posS;
    }

    public void setPosS(String value) {
        this.posS = value;
    }

    public String getLabel() {
        return label;
    }

    public void setLabel(String value) {
        this.label = value;
    }

    public Vector getPosition() {
        return position;
    }

    public void setPosition(Vector position) {
        this.position = position;
    }

    @Override
    public Point process(KafkaLoadService proxy) throws Exception {

        proxy.send(this);
        /*
        //reset position to 0 after reduce the position of all frames so can be normalized the movement, else the IA
        //need to understand that a movement the distances and normal positions
        //If we dont reset this value we will have a lot of diferent points of "earth" of a signal.
        //Then so we will reset all frames to focus on the movement. After we will normalize the frames.


        Float[] aux = Stream.of(getPosS().split(" ")).map(Float::new).toArray(Float[]::new);

        //To 0 is given the meaning of start. The first position.
        setPosition(new Vector(0L, aux[0], aux[1], aux[2], getLabel()));

        //send(this);
        */
        return this;
    }

    @Override
    public String getTopic() {
        return "point";
    }

    @Override
    public KafkaTemplate<Object, Point> getKafkaTemplate() {
        return KafkaTemplatesUtil.getKafkaPointTemplate();
    }

    @Override
    public File getAvroSchemaFile() {
        return AvroFilesUtil.getAvroPointSchema();
    }

    @Override
    public void put(int i, Object v) {
        switch (i) {
            case 0:
                setPosS((String) v);
                break;
            case 1:
                setLabel((String) v);
                break;
            case 2:
                setPosition((Vector) v);
                break;
            default:
                throw new IllegalStateException(AVRO_INDEX_RECORD_PUT.getValue());
        }
    }

    @Override
    public Object get(int i) {
        switch (i) {
            case 0:
                return getPosS();
            case 1:
                return getLabel();
            case 2:
                return getPosition();
            default:
                throw new IllegalStateException(AVRO_INDEX_RECORD_GET.getValue());
        }
    }
}
