//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.05.22 at 11:20:22 PM BST 
//


package com.mei.ergosurgeon.load.data.entities;

import com.mei.ergosurgeon.load.business.api.KafkaLoadService;
import com.mei.ergosurgeon.load.business.utils.AvroFilesUtil;
import com.mei.ergosurgeon.load.business.utils.KafkaTemplatesUtil;
import com.mei.ergosurgeon.load.data.entities.custom.KafkaTopic;
import org.apache.avro.reflect.AvroIgnore;
import org.springframework.kafka.core.KafkaTemplate;

import javax.xml.bind.annotation.*;
import java.io.File;

import static com.mei.ergosurgeon.load.common.IlegalStateExceptionEnum.AVRO_INDEX_RECORD_GET;
import static com.mei.ergosurgeon.load.common.IlegalStateExceptionEnum.AVRO_INDEX_RECORD_PUT;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlRootElement(name = "subject")
public class Subject implements KafkaTopic<Subject> {

    @XmlElement(required = true)
    protected String comment;

    @AvroIgnore
    @XmlElement(required = true)
    protected Segments segments;

    @AvroIgnore
    protected Sensors sensors;

    @AvroIgnore
    protected Joints joints;

    @AvroIgnore
    @XmlElement(required = true)
    protected Frames frames;

    @XmlAttribute(name = "label", required = true)
    protected String label;

    @XmlAttribute(name = "torsoColor", required = true)
    protected String torsoColor;

    @XmlAttribute(name = "frameRate", required = true)
    @XmlSchemaType(name = "nonNegativeInteger")
    protected Long frameRate;

    @XmlAttribute(name = "segmentCount", required = true)
    protected String segmentCount;

    @XmlAttribute(name = "recDate", required = true)
    protected String recDate;

    @XmlAttribute(name = "originalFilename", required = true)
    protected String originalFilename;

    public String getComment() {
        return comment;
    }

    public void setComment(String value) {
        this.comment = value;
    }

    public Segments getSegments() {
        return segments;
    }

    public void setSegments(Segments value) {
        this.segments = value;
    }

    public Sensors getSensors() {
        return sensors;
    }

    public void setSensors(Sensors value) {
        this.sensors = value;
    }

    public Joints getJoints() {
        return joints;
    }

    public void setJoints(Joints value) {
        this.joints = value;
    }

    public Frames getFrames() {
        return frames;
    }

    public void setFrames(Frames value) {
        this.frames = value;
    }

    public String getLabel() {
        return label;
    }

    public void setLabel(String value) {
        this.label = value;
    }

    public String getTorsoColor() {
        return torsoColor;
    }

    public void setTorsoColor(String value) {
        this.torsoColor = value;
    }

    public Long getFrameRate() {
        return frameRate;
    }

    public void setFrameRate(Long value) {
        this.frameRate = value;
    }

    public String getSegmentCount() {
        return segmentCount;
    }

    public void setSegmentCount(String value) {
        this.segmentCount = value;
    }

    public String getRecDate() {
        return recDate;
    }

    public void setRecDate(String value) {
        this.recDate = value;
    }

    public String getOriginalFilename() {
        return originalFilename;
    }

    public void setOriginalFilename(String value) {
        this.originalFilename = value;
    }

    public Subject process(KafkaLoadService proxy) throws Exception {

        proxy.send(this);

        getSegments().process(proxy);
        getJoints().process(proxy);
        getFrames().process(proxy);
        getSensors().process(proxy);

        return this;
    }

    @Override
    public String getTopic() {
        return "subject";
    }

    @Override
    public KafkaTemplate<Object, Subject> getKafkaTemplate() {
        return KafkaTemplatesUtil.getKafkaSubjectTemplate();
    }

    @Override
    public File getAvroSchemaFile() {
        return AvroFilesUtil.getAvroSubjectSchema();
    }

    @Override
    public void put(int i, Object v) {
        switch (i) {
            case 0:
                setComment((String) v);
                break;
            case 1:
                setLabel((String) v);
                break;
            case 2:
                setTorsoColor((String) v);
                break;
            case 3:
                setFrameRate((Long) v);
                break;
            case 4:
                setSegmentCount((String) v);
                break;
            case 5:
                setRecDate((String) v);
                break;
            case 6:
                setOriginalFilename((String) v);
                break;
            default:
                throw new IllegalStateException(AVRO_INDEX_RECORD_PUT.getValue());
        }
    }

    @Override
    public Object get(int i) {
        switch (i) {
            case 0:
                return getComment();
            case 1:
                return getLabel();
            case 2:
                return getTorsoColor();
            case 3:
                return getFrameRate();
            case 4:
                return getSegmentCount();
            case 5:
                return getRecDate();
            case 6:
                return getOriginalFilename();
            default:
                throw new IllegalStateException(AVRO_INDEX_RECORD_GET.getValue());
        }
    }
}
