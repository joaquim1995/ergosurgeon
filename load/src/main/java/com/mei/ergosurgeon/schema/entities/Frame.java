/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mei.ergosurgeon.schema.entities;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Frame extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Frame\",\"namespace\":\"com.mei.ergosurgeon.schema.entities\",\"fields\":[{\"name\":\"orientation\",\"type\":\"string\"},{\"name\":\"position\",\"type\":\"string\"},{\"name\":\"velocity\",\"type\":[\"null\",\"string\"]},{\"name\":\"acceleration\",\"type\":[\"null\",\"string\"]},{\"name\":\"angularVelocity\",\"type\":[\"null\",\"string\"]},{\"name\":\"angularAcceleration\",\"type\":[\"null\",\"string\"]},{\"name\":\"sensorAcceleration\",\"type\":[\"null\",\"string\"]},{\"name\":\"sensorAngularVelocity\",\"type\":[\"null\",\"string\"]},{\"name\":\"sensorMagneticField\",\"type\":[\"null\",\"string\"]},{\"name\":\"sensorOrientation\",\"type\":[\"null\",\"string\"]},{\"name\":\"jointAngle\",\"type\":[\"null\",\"string\"]},{\"name\":\"jointAngleXZY\",\"type\":[\"null\",\"string\"]},{\"name\":\"centerOfMass\",\"type\":[\"null\",\"string\"]},{\"name\":\"marker\",\"type\":[\"null\",\"string\"]},{\"name\":\"time\",\"type\":[\"null\",\"string\"]},{\"name\":\"index\",\"type\":[\"null\",\"string\"]},{\"name\":\"tc\",\"type\":[\"null\",\"string\"]},{\"name\":\"ms\",\"type\":[\"null\",\"string\"]},{\"name\":\"type\",\"type\":[\"null\",\"string\"]}]}");
    private static final long serialVersionUID = -7255442222958567208L;
    private static SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<Frame> ENCODER =
            new BinaryMessageEncoder<Frame>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<Frame> DECODER =
            new BinaryMessageDecoder<Frame>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Frame>
            WRITER$ = (org.apache.avro.io.DatumWriter<Frame>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Frame>
            READER$ = (org.apache.avro.io.DatumReader<Frame>) MODEL$.createDatumReader(SCHEMA$);
    @Deprecated
    public java.lang.CharSequence orientation;
    @Deprecated
    public java.lang.CharSequence position;
    @Deprecated
    public java.lang.CharSequence velocity;
    @Deprecated
    public java.lang.CharSequence acceleration;
    @Deprecated
    public java.lang.CharSequence angularVelocity;
    @Deprecated
    public java.lang.CharSequence angularAcceleration;
    @Deprecated
    public java.lang.CharSequence sensorAcceleration;
    @Deprecated
    public java.lang.CharSequence sensorAngularVelocity;
    @Deprecated
    public java.lang.CharSequence sensorMagneticField;
    @Deprecated
    public java.lang.CharSequence sensorOrientation;
    @Deprecated
    public java.lang.CharSequence jointAngle;
    @Deprecated
    public java.lang.CharSequence jointAngleXZY;
    @Deprecated
    public java.lang.CharSequence centerOfMass;
    @Deprecated
    public java.lang.CharSequence marker;
    @Deprecated
    public java.lang.CharSequence time;
    @Deprecated
    public java.lang.CharSequence index;
    @Deprecated
    public java.lang.CharSequence tc;
    @Deprecated
    public java.lang.CharSequence ms;
    @Deprecated
    public java.lang.CharSequence type;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Frame() {
    }

    /**
     * All-args constructor.
     *
     * @param orientation           The new value for orientation
     * @param position              The new value for position
     * @param velocity              The new value for velocity
     * @param acceleration          The new value for acceleration
     * @param angularVelocity       The new value for angularVelocity
     * @param angularAcceleration   The new value for angularAcceleration
     * @param sensorAcceleration    The new value for sensorAcceleration
     * @param sensorAngularVelocity The new value for sensorAngularVelocity
     * @param sensorMagneticField   The new value for sensorMagneticField
     * @param sensorOrientation     The new value for sensorOrientation
     * @param jointAngle            The new value for jointAngle
     * @param jointAngleXZY         The new value for jointAngleXZY
     * @param centerOfMass          The new value for centerOfMass
     * @param marker                The new value for marker
     * @param time                  The new value for time
     * @param index                 The new value for index
     * @param tc                    The new value for tc
     * @param ms                    The new value for ms
     * @param type                  The new value for type
     */
    public Frame(java.lang.CharSequence orientation, java.lang.CharSequence position, java.lang.CharSequence velocity, java.lang.CharSequence acceleration, java.lang.CharSequence angularVelocity, java.lang.CharSequence angularAcceleration, java.lang.CharSequence sensorAcceleration, java.lang.CharSequence sensorAngularVelocity, java.lang.CharSequence sensorMagneticField, java.lang.CharSequence sensorOrientation, java.lang.CharSequence jointAngle, java.lang.CharSequence jointAngleXZY, java.lang.CharSequence centerOfMass, java.lang.CharSequence marker, java.lang.CharSequence time, java.lang.CharSequence index, java.lang.CharSequence tc, java.lang.CharSequence ms, java.lang.CharSequence type) {
        this.orientation = orientation;
        this.position = position;
        this.velocity = velocity;
        this.acceleration = acceleration;
        this.angularVelocity = angularVelocity;
        this.angularAcceleration = angularAcceleration;
        this.sensorAcceleration = sensorAcceleration;
        this.sensorAngularVelocity = sensorAngularVelocity;
        this.sensorMagneticField = sensorMagneticField;
        this.sensorOrientation = sensorOrientation;
        this.jointAngle = jointAngle;
        this.jointAngleXZY = jointAngleXZY;
        this.centerOfMass = centerOfMass;
        this.marker = marker;
        this.time = time;
        this.index = index;
        this.tc = tc;
        this.ms = ms;
        this.type = type;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Frame> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Frame> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Frame> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Frame>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a Frame from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Frame instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Frame fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new Frame RecordBuilder.
     *
     * @return A new Frame RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Frame.Builder newBuilder() {
        return new com.mei.ergosurgeon.schema.entities.Frame.Builder();
    }

    /**
     * Creates a new Frame RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new Frame RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Frame.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Frame.Builder other) {
        if (other == null) {
            return new com.mei.ergosurgeon.schema.entities.Frame.Builder();
        } else {
            return new com.mei.ergosurgeon.schema.entities.Frame.Builder(other);
        }
    }

    /**
     * Creates a new Frame RecordBuilder by copying an existing Frame instance.
     *
     * @param other The existing instance to copy.
     * @return A new Frame RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Frame.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Frame other) {
        if (other == null) {
            return new com.mei.ergosurgeon.schema.entities.Frame.Builder();
        } else {
            return new com.mei.ergosurgeon.schema.entities.Frame.Builder(other);
        }
    }

    /**
     * Serializes this Frame to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return orientation;
            case 1:
                return position;
            case 2:
                return velocity;
            case 3:
                return acceleration;
            case 4:
                return angularVelocity;
            case 5:
                return angularAcceleration;
            case 6:
                return sensorAcceleration;
            case 7:
                return sensorAngularVelocity;
            case 8:
                return sensorMagneticField;
            case 9:
                return sensorOrientation;
            case 10:
                return jointAngle;
            case 11:
                return jointAngleXZY;
            case 12:
                return centerOfMass;
            case 13:
                return marker;
            case 14:
                return time;
            case 15:
                return index;
            case 16:
                return tc;
            case 17:
                return ms;
            case 18:
                return type;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                orientation = (java.lang.CharSequence) value$;
                break;
            case 1:
                position = (java.lang.CharSequence) value$;
                break;
            case 2:
                velocity = (java.lang.CharSequence) value$;
                break;
            case 3:
                acceleration = (java.lang.CharSequence) value$;
                break;
            case 4:
                angularVelocity = (java.lang.CharSequence) value$;
                break;
            case 5:
                angularAcceleration = (java.lang.CharSequence) value$;
                break;
            case 6:
                sensorAcceleration = (java.lang.CharSequence) value$;
                break;
            case 7:
                sensorAngularVelocity = (java.lang.CharSequence) value$;
                break;
            case 8:
                sensorMagneticField = (java.lang.CharSequence) value$;
                break;
            case 9:
                sensorOrientation = (java.lang.CharSequence) value$;
                break;
            case 10:
                jointAngle = (java.lang.CharSequence) value$;
                break;
            case 11:
                jointAngleXZY = (java.lang.CharSequence) value$;
                break;
            case 12:
                centerOfMass = (java.lang.CharSequence) value$;
                break;
            case 13:
                marker = (java.lang.CharSequence) value$;
                break;
            case 14:
                time = (java.lang.CharSequence) value$;
                break;
            case 15:
                index = (java.lang.CharSequence) value$;
                break;
            case 16:
                tc = (java.lang.CharSequence) value$;
                break;
            case 17:
                ms = (java.lang.CharSequence) value$;
                break;
            case 18:
                type = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'orientation' field.
     *
     * @return The value of the 'orientation' field.
     */
    public java.lang.CharSequence getOrientation() {
        return orientation;
    }

    /**
     * Sets the value of the 'orientation' field.
     *
     * @param value the value to set.
     */
    public void setOrientation(java.lang.CharSequence value) {
        this.orientation = value;
    }

    /**
     * Gets the value of the 'position' field.
     *
     * @return The value of the 'position' field.
     */
    public java.lang.CharSequence getPosition() {
        return position;
    }

    /**
     * Sets the value of the 'position' field.
     *
     * @param value the value to set.
     */
    public void setPosition(java.lang.CharSequence value) {
        this.position = value;
    }

    /**
     * Gets the value of the 'velocity' field.
     *
     * @return The value of the 'velocity' field.
     */
    public java.lang.CharSequence getVelocity() {
        return velocity;
    }

    /**
     * Sets the value of the 'velocity' field.
     *
     * @param value the value to set.
     */
    public void setVelocity(java.lang.CharSequence value) {
        this.velocity = value;
    }

    /**
     * Gets the value of the 'acceleration' field.
     *
     * @return The value of the 'acceleration' field.
     */
    public java.lang.CharSequence getAcceleration() {
        return acceleration;
    }

    /**
     * Sets the value of the 'acceleration' field.
     *
     * @param value the value to set.
     */
    public void setAcceleration(java.lang.CharSequence value) {
        this.acceleration = value;
    }

    /**
     * Gets the value of the 'angularVelocity' field.
     *
     * @return The value of the 'angularVelocity' field.
     */
    public java.lang.CharSequence getAngularVelocity() {
        return angularVelocity;
    }

    /**
     * Sets the value of the 'angularVelocity' field.
     *
     * @param value the value to set.
     */
    public void setAngularVelocity(java.lang.CharSequence value) {
        this.angularVelocity = value;
    }

    /**
     * Gets the value of the 'angularAcceleration' field.
     *
     * @return The value of the 'angularAcceleration' field.
     */
    public java.lang.CharSequence getAngularAcceleration() {
        return angularAcceleration;
    }

    /**
     * Sets the value of the 'angularAcceleration' field.
     *
     * @param value the value to set.
     */
    public void setAngularAcceleration(java.lang.CharSequence value) {
        this.angularAcceleration = value;
    }

    /**
     * Gets the value of the 'sensorAcceleration' field.
     *
     * @return The value of the 'sensorAcceleration' field.
     */
    public java.lang.CharSequence getSensorAcceleration() {
        return sensorAcceleration;
    }

    /**
     * Sets the value of the 'sensorAcceleration' field.
     *
     * @param value the value to set.
     */
    public void setSensorAcceleration(java.lang.CharSequence value) {
        this.sensorAcceleration = value;
    }

    /**
     * Gets the value of the 'sensorAngularVelocity' field.
     *
     * @return The value of the 'sensorAngularVelocity' field.
     */
    public java.lang.CharSequence getSensorAngularVelocity() {
        return sensorAngularVelocity;
    }

    /**
     * Sets the value of the 'sensorAngularVelocity' field.
     *
     * @param value the value to set.
     */
    public void setSensorAngularVelocity(java.lang.CharSequence value) {
        this.sensorAngularVelocity = value;
    }

    /**
     * Gets the value of the 'sensorMagneticField' field.
     *
     * @return The value of the 'sensorMagneticField' field.
     */
    public java.lang.CharSequence getSensorMagneticField() {
        return sensorMagneticField;
    }

    /**
     * Sets the value of the 'sensorMagneticField' field.
     *
     * @param value the value to set.
     */
    public void setSensorMagneticField(java.lang.CharSequence value) {
        this.sensorMagneticField = value;
    }

    /**
     * Gets the value of the 'sensorOrientation' field.
     *
     * @return The value of the 'sensorOrientation' field.
     */
    public java.lang.CharSequence getSensorOrientation() {
        return sensorOrientation;
    }

    /**
     * Sets the value of the 'sensorOrientation' field.
     *
     * @param value the value to set.
     */
    public void setSensorOrientation(java.lang.CharSequence value) {
        this.sensorOrientation = value;
    }

    /**
     * Gets the value of the 'jointAngle' field.
     *
     * @return The value of the 'jointAngle' field.
     */
    public java.lang.CharSequence getJointAngle() {
        return jointAngle;
    }

    /**
     * Sets the value of the 'jointAngle' field.
     *
     * @param value the value to set.
     */
    public void setJointAngle(java.lang.CharSequence value) {
        this.jointAngle = value;
    }

    /**
     * Gets the value of the 'jointAngleXZY' field.
     *
     * @return The value of the 'jointAngleXZY' field.
     */
    public java.lang.CharSequence getJointAngleXZY() {
        return jointAngleXZY;
    }

    /**
     * Sets the value of the 'jointAngleXZY' field.
     *
     * @param value the value to set.
     */
    public void setJointAngleXZY(java.lang.CharSequence value) {
        this.jointAngleXZY = value;
    }

    /**
     * Gets the value of the 'centerOfMass' field.
     *
     * @return The value of the 'centerOfMass' field.
     */
    public java.lang.CharSequence getCenterOfMass() {
        return centerOfMass;
    }

    /**
     * Sets the value of the 'centerOfMass' field.
     *
     * @param value the value to set.
     */
    public void setCenterOfMass(java.lang.CharSequence value) {
        this.centerOfMass = value;
    }

    /**
     * Gets the value of the 'marker' field.
     *
     * @return The value of the 'marker' field.
     */
    public java.lang.CharSequence getMarker() {
        return marker;
    }

    /**
     * Sets the value of the 'marker' field.
     *
     * @param value the value to set.
     */
    public void setMarker(java.lang.CharSequence value) {
        this.marker = value;
    }

    /**
     * Gets the value of the 'time' field.
     *
     * @return The value of the 'time' field.
     */
    public java.lang.CharSequence getTime() {
        return time;
    }

    /**
     * Sets the value of the 'time' field.
     *
     * @param value the value to set.
     */
    public void setTime(java.lang.CharSequence value) {
        this.time = value;
    }

    /**
     * Gets the value of the 'index' field.
     *
     * @return The value of the 'index' field.
     */
    public java.lang.CharSequence getIndex() {
        return index;
    }

    /**
     * Sets the value of the 'index' field.
     *
     * @param value the value to set.
     */
    public void setIndex(java.lang.CharSequence value) {
        this.index = value;
    }

    /**
     * Gets the value of the 'tc' field.
     *
     * @return The value of the 'tc' field.
     */
    public java.lang.CharSequence getTc() {
        return tc;
    }

    /**
     * Sets the value of the 'tc' field.
     *
     * @param value the value to set.
     */
    public void setTc(java.lang.CharSequence value) {
        this.tc = value;
    }

    /**
     * Gets the value of the 'ms' field.
     *
     * @return The value of the 'ms' field.
     */
    public java.lang.CharSequence getMs() {
        return ms;
    }

    /**
     * Sets the value of the 'ms' field.
     *
     * @param value the value to set.
     */
    public void setMs(java.lang.CharSequence value) {
        this.ms = value;
    }

    /**
     * Gets the value of the 'type' field.
     *
     * @return The value of the 'type' field.
     */
    public java.lang.CharSequence getType() {
        return type;
    }

    /**
     * Sets the value of the 'type' field.
     *
     * @param value the value to set.
     */
    public void setType(java.lang.CharSequence value) {
        this.type = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.orientation);

        out.writeString(this.position);

        if (this.velocity == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.velocity);
        }

        if (this.acceleration == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.acceleration);
        }

        if (this.angularVelocity == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.angularVelocity);
        }

        if (this.angularAcceleration == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.angularAcceleration);
        }

        if (this.sensorAcceleration == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.sensorAcceleration);
        }

        if (this.sensorAngularVelocity == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.sensorAngularVelocity);
        }

        if (this.sensorMagneticField == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.sensorMagneticField);
        }

        if (this.sensorOrientation == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.sensorOrientation);
        }

        if (this.jointAngle == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.jointAngle);
        }

        if (this.jointAngleXZY == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.jointAngleXZY);
        }

        if (this.centerOfMass == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.centerOfMass);
        }

        if (this.marker == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.marker);
        }

        if (this.time == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.time);
        }

        if (this.index == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.index);
        }

        if (this.tc == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.tc);
        }

        if (this.ms == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.ms);
        }

        if (this.type == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.type);
        }

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.orientation = in.readString(this.orientation instanceof Utf8 ? (Utf8) this.orientation : null);

            this.position = in.readString(this.position instanceof Utf8 ? (Utf8) this.position : null);

            if (in.readIndex() != 1) {
                in.readNull();
                this.velocity = null;
            } else {
                this.velocity = in.readString(this.velocity instanceof Utf8 ? (Utf8) this.velocity : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.acceleration = null;
            } else {
                this.acceleration = in.readString(this.acceleration instanceof Utf8 ? (Utf8) this.acceleration : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.angularVelocity = null;
            } else {
                this.angularVelocity = in.readString(this.angularVelocity instanceof Utf8 ? (Utf8) this.angularVelocity : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.angularAcceleration = null;
            } else {
                this.angularAcceleration = in.readString(this.angularAcceleration instanceof Utf8 ? (Utf8) this.angularAcceleration : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.sensorAcceleration = null;
            } else {
                this.sensorAcceleration = in.readString(this.sensorAcceleration instanceof Utf8 ? (Utf8) this.sensorAcceleration : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.sensorAngularVelocity = null;
            } else {
                this.sensorAngularVelocity = in.readString(this.sensorAngularVelocity instanceof Utf8 ? (Utf8) this.sensorAngularVelocity : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.sensorMagneticField = null;
            } else {
                this.sensorMagneticField = in.readString(this.sensorMagneticField instanceof Utf8 ? (Utf8) this.sensorMagneticField : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.sensorOrientation = null;
            } else {
                this.sensorOrientation = in.readString(this.sensorOrientation instanceof Utf8 ? (Utf8) this.sensorOrientation : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.jointAngle = null;
            } else {
                this.jointAngle = in.readString(this.jointAngle instanceof Utf8 ? (Utf8) this.jointAngle : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.jointAngleXZY = null;
            } else {
                this.jointAngleXZY = in.readString(this.jointAngleXZY instanceof Utf8 ? (Utf8) this.jointAngleXZY : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.centerOfMass = null;
            } else {
                this.centerOfMass = in.readString(this.centerOfMass instanceof Utf8 ? (Utf8) this.centerOfMass : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.marker = null;
            } else {
                this.marker = in.readString(this.marker instanceof Utf8 ? (Utf8) this.marker : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.time = null;
            } else {
                this.time = in.readString(this.time instanceof Utf8 ? (Utf8) this.time : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.index = null;
            } else {
                this.index = in.readString(this.index instanceof Utf8 ? (Utf8) this.index : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.tc = null;
            } else {
                this.tc = in.readString(this.tc instanceof Utf8 ? (Utf8) this.tc : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.ms = null;
            } else {
                this.ms = in.readString(this.ms instanceof Utf8 ? (Utf8) this.ms : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.type = null;
            } else {
                this.type = in.readString(this.type instanceof Utf8 ? (Utf8) this.type : null);
            }

        } else {
            for (int i = 0; i < 19; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.orientation = in.readString(this.orientation instanceof Utf8 ? (Utf8) this.orientation : null);
                        break;

                    case 1:
                        this.position = in.readString(this.position instanceof Utf8 ? (Utf8) this.position : null);
                        break;

                    case 2:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.velocity = null;
                        } else {
                            this.velocity = in.readString(this.velocity instanceof Utf8 ? (Utf8) this.velocity : null);
                        }
                        break;

                    case 3:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.acceleration = null;
                        } else {
                            this.acceleration = in.readString(this.acceleration instanceof Utf8 ? (Utf8) this.acceleration : null);
                        }
                        break;

                    case 4:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.angularVelocity = null;
                        } else {
                            this.angularVelocity = in.readString(this.angularVelocity instanceof Utf8 ? (Utf8) this.angularVelocity : null);
                        }
                        break;

                    case 5:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.angularAcceleration = null;
                        } else {
                            this.angularAcceleration = in.readString(this.angularAcceleration instanceof Utf8 ? (Utf8) this.angularAcceleration : null);
                        }
                        break;

                    case 6:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.sensorAcceleration = null;
                        } else {
                            this.sensorAcceleration = in.readString(this.sensorAcceleration instanceof Utf8 ? (Utf8) this.sensorAcceleration : null);
                        }
                        break;

                    case 7:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.sensorAngularVelocity = null;
                        } else {
                            this.sensorAngularVelocity = in.readString(this.sensorAngularVelocity instanceof Utf8 ? (Utf8) this.sensorAngularVelocity : null);
                        }
                        break;

                    case 8:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.sensorMagneticField = null;
                        } else {
                            this.sensorMagneticField = in.readString(this.sensorMagneticField instanceof Utf8 ? (Utf8) this.sensorMagneticField : null);
                        }
                        break;

                    case 9:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.sensorOrientation = null;
                        } else {
                            this.sensorOrientation = in.readString(this.sensorOrientation instanceof Utf8 ? (Utf8) this.sensorOrientation : null);
                        }
                        break;

                    case 10:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.jointAngle = null;
                        } else {
                            this.jointAngle = in.readString(this.jointAngle instanceof Utf8 ? (Utf8) this.jointAngle : null);
                        }
                        break;

                    case 11:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.jointAngleXZY = null;
                        } else {
                            this.jointAngleXZY = in.readString(this.jointAngleXZY instanceof Utf8 ? (Utf8) this.jointAngleXZY : null);
                        }
                        break;

                    case 12:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.centerOfMass = null;
                        } else {
                            this.centerOfMass = in.readString(this.centerOfMass instanceof Utf8 ? (Utf8) this.centerOfMass : null);
                        }
                        break;

                    case 13:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.marker = null;
                        } else {
                            this.marker = in.readString(this.marker instanceof Utf8 ? (Utf8) this.marker : null);
                        }
                        break;

                    case 14:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.time = null;
                        } else {
                            this.time = in.readString(this.time instanceof Utf8 ? (Utf8) this.time : null);
                        }
                        break;

                    case 15:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.index = null;
                        } else {
                            this.index = in.readString(this.index instanceof Utf8 ? (Utf8) this.index : null);
                        }
                        break;

                    case 16:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.tc = null;
                        } else {
                            this.tc = in.readString(this.tc instanceof Utf8 ? (Utf8) this.tc : null);
                        }
                        break;

                    case 17:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.ms = null;
                        } else {
                            this.ms = in.readString(this.ms instanceof Utf8 ? (Utf8) this.ms : null);
                        }
                        break;

                    case 18:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.type = null;
                        } else {
                            this.type = in.readString(this.type instanceof Utf8 ? (Utf8) this.type : null);
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for Frame instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Frame>
            implements org.apache.avro.data.RecordBuilder<Frame> {

        private java.lang.CharSequence orientation;
        private java.lang.CharSequence position;
        private java.lang.CharSequence velocity;
        private java.lang.CharSequence acceleration;
        private java.lang.CharSequence angularVelocity;
        private java.lang.CharSequence angularAcceleration;
        private java.lang.CharSequence sensorAcceleration;
        private java.lang.CharSequence sensorAngularVelocity;
        private java.lang.CharSequence sensorMagneticField;
        private java.lang.CharSequence sensorOrientation;
        private java.lang.CharSequence jointAngle;
        private java.lang.CharSequence jointAngleXZY;
        private java.lang.CharSequence centerOfMass;
        private java.lang.CharSequence marker;
        private java.lang.CharSequence time;
        private java.lang.CharSequence index;
        private java.lang.CharSequence tc;
        private java.lang.CharSequence ms;
        private java.lang.CharSequence type;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(com.mei.ergosurgeon.schema.entities.Frame.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.orientation)) {
                this.orientation = data().deepCopy(fields()[0].schema(), other.orientation);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.position)) {
                this.position = data().deepCopy(fields()[1].schema(), other.position);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.velocity)) {
                this.velocity = data().deepCopy(fields()[2].schema(), other.velocity);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.acceleration)) {
                this.acceleration = data().deepCopy(fields()[3].schema(), other.acceleration);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.angularVelocity)) {
                this.angularVelocity = data().deepCopy(fields()[4].schema(), other.angularVelocity);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.angularAcceleration)) {
                this.angularAcceleration = data().deepCopy(fields()[5].schema(), other.angularAcceleration);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.sensorAcceleration)) {
                this.sensorAcceleration = data().deepCopy(fields()[6].schema(), other.sensorAcceleration);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.sensorAngularVelocity)) {
                this.sensorAngularVelocity = data().deepCopy(fields()[7].schema(), other.sensorAngularVelocity);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.sensorMagneticField)) {
                this.sensorMagneticField = data().deepCopy(fields()[8].schema(), other.sensorMagneticField);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.sensorOrientation)) {
                this.sensorOrientation = data().deepCopy(fields()[9].schema(), other.sensorOrientation);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.jointAngle)) {
                this.jointAngle = data().deepCopy(fields()[10].schema(), other.jointAngle);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.jointAngleXZY)) {
                this.jointAngleXZY = data().deepCopy(fields()[11].schema(), other.jointAngleXZY);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.centerOfMass)) {
                this.centerOfMass = data().deepCopy(fields()[12].schema(), other.centerOfMass);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
            if (isValidValue(fields()[13], other.marker)) {
                this.marker = data().deepCopy(fields()[13].schema(), other.marker);
                fieldSetFlags()[13] = other.fieldSetFlags()[13];
            }
            if (isValidValue(fields()[14], other.time)) {
                this.time = data().deepCopy(fields()[14].schema(), other.time);
                fieldSetFlags()[14] = other.fieldSetFlags()[14];
            }
            if (isValidValue(fields()[15], other.index)) {
                this.index = data().deepCopy(fields()[15].schema(), other.index);
                fieldSetFlags()[15] = other.fieldSetFlags()[15];
            }
            if (isValidValue(fields()[16], other.tc)) {
                this.tc = data().deepCopy(fields()[16].schema(), other.tc);
                fieldSetFlags()[16] = other.fieldSetFlags()[16];
            }
            if (isValidValue(fields()[17], other.ms)) {
                this.ms = data().deepCopy(fields()[17].schema(), other.ms);
                fieldSetFlags()[17] = other.fieldSetFlags()[17];
            }
            if (isValidValue(fields()[18], other.type)) {
                this.type = data().deepCopy(fields()[18].schema(), other.type);
                fieldSetFlags()[18] = other.fieldSetFlags()[18];
            }
        }

        /**
         * Creates a Builder by copying an existing Frame instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(com.mei.ergosurgeon.schema.entities.Frame other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.orientation)) {
                this.orientation = data().deepCopy(fields()[0].schema(), other.orientation);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.position)) {
                this.position = data().deepCopy(fields()[1].schema(), other.position);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.velocity)) {
                this.velocity = data().deepCopy(fields()[2].schema(), other.velocity);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.acceleration)) {
                this.acceleration = data().deepCopy(fields()[3].schema(), other.acceleration);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.angularVelocity)) {
                this.angularVelocity = data().deepCopy(fields()[4].schema(), other.angularVelocity);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.angularAcceleration)) {
                this.angularAcceleration = data().deepCopy(fields()[5].schema(), other.angularAcceleration);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.sensorAcceleration)) {
                this.sensorAcceleration = data().deepCopy(fields()[6].schema(), other.sensorAcceleration);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.sensorAngularVelocity)) {
                this.sensorAngularVelocity = data().deepCopy(fields()[7].schema(), other.sensorAngularVelocity);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.sensorMagneticField)) {
                this.sensorMagneticField = data().deepCopy(fields()[8].schema(), other.sensorMagneticField);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.sensorOrientation)) {
                this.sensorOrientation = data().deepCopy(fields()[9].schema(), other.sensorOrientation);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.jointAngle)) {
                this.jointAngle = data().deepCopy(fields()[10].schema(), other.jointAngle);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.jointAngleXZY)) {
                this.jointAngleXZY = data().deepCopy(fields()[11].schema(), other.jointAngleXZY);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.centerOfMass)) {
                this.centerOfMass = data().deepCopy(fields()[12].schema(), other.centerOfMass);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.marker)) {
                this.marker = data().deepCopy(fields()[13].schema(), other.marker);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.time)) {
                this.time = data().deepCopy(fields()[14].schema(), other.time);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.index)) {
                this.index = data().deepCopy(fields()[15].schema(), other.index);
                fieldSetFlags()[15] = true;
            }
            if (isValidValue(fields()[16], other.tc)) {
                this.tc = data().deepCopy(fields()[16].schema(), other.tc);
                fieldSetFlags()[16] = true;
            }
            if (isValidValue(fields()[17], other.ms)) {
                this.ms = data().deepCopy(fields()[17].schema(), other.ms);
                fieldSetFlags()[17] = true;
            }
            if (isValidValue(fields()[18], other.type)) {
                this.type = data().deepCopy(fields()[18].schema(), other.type);
                fieldSetFlags()[18] = true;
            }
        }

        /**
         * Gets the value of the 'orientation' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getOrientation() {
            return orientation;
        }


        /**
         * Sets the value of the 'orientation' field.
         *
         * @param value The value of 'orientation'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setOrientation(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.orientation = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'orientation' field has been set.
         *
         * @return True if the 'orientation' field has been set, false otherwise.
         */
        public boolean hasOrientation() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'orientation' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearOrientation() {
            orientation = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'position' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getPosition() {
            return position;
        }


        /**
         * Sets the value of the 'position' field.
         *
         * @param value The value of 'position'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setPosition(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.position = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'position' field has been set.
         *
         * @return True if the 'position' field has been set, false otherwise.
         */
        public boolean hasPosition() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'position' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearPosition() {
            position = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'velocity' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getVelocity() {
            return velocity;
        }


        /**
         * Sets the value of the 'velocity' field.
         *
         * @param value The value of 'velocity'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setVelocity(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.velocity = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'velocity' field has been set.
         *
         * @return True if the 'velocity' field has been set, false otherwise.
         */
        public boolean hasVelocity() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'velocity' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearVelocity() {
            velocity = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'acceleration' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getAcceleration() {
            return acceleration;
        }


        /**
         * Sets the value of the 'acceleration' field.
         *
         * @param value The value of 'acceleration'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setAcceleration(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.acceleration = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'acceleration' field has been set.
         *
         * @return True if the 'acceleration' field has been set, false otherwise.
         */
        public boolean hasAcceleration() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'acceleration' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearAcceleration() {
            acceleration = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'angularVelocity' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getAngularVelocity() {
            return angularVelocity;
        }


        /**
         * Sets the value of the 'angularVelocity' field.
         *
         * @param value The value of 'angularVelocity'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setAngularVelocity(java.lang.CharSequence value) {
            validate(fields()[4], value);
            this.angularVelocity = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'angularVelocity' field has been set.
         *
         * @return True if the 'angularVelocity' field has been set, false otherwise.
         */
        public boolean hasAngularVelocity() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'angularVelocity' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearAngularVelocity() {
            angularVelocity = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'angularAcceleration' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getAngularAcceleration() {
            return angularAcceleration;
        }


        /**
         * Sets the value of the 'angularAcceleration' field.
         *
         * @param value The value of 'angularAcceleration'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setAngularAcceleration(java.lang.CharSequence value) {
            validate(fields()[5], value);
            this.angularAcceleration = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'angularAcceleration' field has been set.
         *
         * @return True if the 'angularAcceleration' field has been set, false otherwise.
         */
        public boolean hasAngularAcceleration() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'angularAcceleration' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearAngularAcceleration() {
            angularAcceleration = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'sensorAcceleration' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getSensorAcceleration() {
            return sensorAcceleration;
        }


        /**
         * Sets the value of the 'sensorAcceleration' field.
         *
         * @param value The value of 'sensorAcceleration'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setSensorAcceleration(java.lang.CharSequence value) {
            validate(fields()[6], value);
            this.sensorAcceleration = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'sensorAcceleration' field has been set.
         *
         * @return True if the 'sensorAcceleration' field has been set, false otherwise.
         */
        public boolean hasSensorAcceleration() {
            return fieldSetFlags()[6];
        }


        /**
         * Clears the value of the 'sensorAcceleration' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearSensorAcceleration() {
            sensorAcceleration = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'sensorAngularVelocity' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getSensorAngularVelocity() {
            return sensorAngularVelocity;
        }


        /**
         * Sets the value of the 'sensorAngularVelocity' field.
         *
         * @param value The value of 'sensorAngularVelocity'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setSensorAngularVelocity(java.lang.CharSequence value) {
            validate(fields()[7], value);
            this.sensorAngularVelocity = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'sensorAngularVelocity' field has been set.
         *
         * @return True if the 'sensorAngularVelocity' field has been set, false otherwise.
         */
        public boolean hasSensorAngularVelocity() {
            return fieldSetFlags()[7];
        }


        /**
         * Clears the value of the 'sensorAngularVelocity' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearSensorAngularVelocity() {
            sensorAngularVelocity = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'sensorMagneticField' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getSensorMagneticField() {
            return sensorMagneticField;
        }


        /**
         * Sets the value of the 'sensorMagneticField' field.
         *
         * @param value The value of 'sensorMagneticField'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setSensorMagneticField(java.lang.CharSequence value) {
            validate(fields()[8], value);
            this.sensorMagneticField = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'sensorMagneticField' field has been set.
         *
         * @return True if the 'sensorMagneticField' field has been set, false otherwise.
         */
        public boolean hasSensorMagneticField() {
            return fieldSetFlags()[8];
        }


        /**
         * Clears the value of the 'sensorMagneticField' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearSensorMagneticField() {
            sensorMagneticField = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'sensorOrientation' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getSensorOrientation() {
            return sensorOrientation;
        }


        /**
         * Sets the value of the 'sensorOrientation' field.
         *
         * @param value The value of 'sensorOrientation'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setSensorOrientation(java.lang.CharSequence value) {
            validate(fields()[9], value);
            this.sensorOrientation = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'sensorOrientation' field has been set.
         *
         * @return True if the 'sensorOrientation' field has been set, false otherwise.
         */
        public boolean hasSensorOrientation() {
            return fieldSetFlags()[9];
        }


        /**
         * Clears the value of the 'sensorOrientation' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearSensorOrientation() {
            sensorOrientation = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'jointAngle' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getJointAngle() {
            return jointAngle;
        }


        /**
         * Sets the value of the 'jointAngle' field.
         *
         * @param value The value of 'jointAngle'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setJointAngle(java.lang.CharSequence value) {
            validate(fields()[10], value);
            this.jointAngle = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'jointAngle' field has been set.
         *
         * @return True if the 'jointAngle' field has been set, false otherwise.
         */
        public boolean hasJointAngle() {
            return fieldSetFlags()[10];
        }


        /**
         * Clears the value of the 'jointAngle' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearJointAngle() {
            jointAngle = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'jointAngleXZY' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getJointAngleXZY() {
            return jointAngleXZY;
        }


        /**
         * Sets the value of the 'jointAngleXZY' field.
         *
         * @param value The value of 'jointAngleXZY'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setJointAngleXZY(java.lang.CharSequence value) {
            validate(fields()[11], value);
            this.jointAngleXZY = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'jointAngleXZY' field has been set.
         *
         * @return True if the 'jointAngleXZY' field has been set, false otherwise.
         */
        public boolean hasJointAngleXZY() {
            return fieldSetFlags()[11];
        }


        /**
         * Clears the value of the 'jointAngleXZY' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearJointAngleXZY() {
            jointAngleXZY = null;
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'centerOfMass' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getCenterOfMass() {
            return centerOfMass;
        }


        /**
         * Sets the value of the 'centerOfMass' field.
         *
         * @param value The value of 'centerOfMass'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setCenterOfMass(java.lang.CharSequence value) {
            validate(fields()[12], value);
            this.centerOfMass = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'centerOfMass' field has been set.
         *
         * @return True if the 'centerOfMass' field has been set, false otherwise.
         */
        public boolean hasCenterOfMass() {
            return fieldSetFlags()[12];
        }


        /**
         * Clears the value of the 'centerOfMass' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearCenterOfMass() {
            centerOfMass = null;
            fieldSetFlags()[12] = false;
            return this;
        }

        /**
         * Gets the value of the 'marker' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getMarker() {
            return marker;
        }


        /**
         * Sets the value of the 'marker' field.
         *
         * @param value The value of 'marker'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setMarker(java.lang.CharSequence value) {
            validate(fields()[13], value);
            this.marker = value;
            fieldSetFlags()[13] = true;
            return this;
        }

        /**
         * Checks whether the 'marker' field has been set.
         *
         * @return True if the 'marker' field has been set, false otherwise.
         */
        public boolean hasMarker() {
            return fieldSetFlags()[13];
        }


        /**
         * Clears the value of the 'marker' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearMarker() {
            marker = null;
            fieldSetFlags()[13] = false;
            return this;
        }

        /**
         * Gets the value of the 'time' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getTime() {
            return time;
        }


        /**
         * Sets the value of the 'time' field.
         *
         * @param value The value of 'time'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setTime(java.lang.CharSequence value) {
            validate(fields()[14], value);
            this.time = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /**
         * Checks whether the 'time' field has been set.
         *
         * @return True if the 'time' field has been set, false otherwise.
         */
        public boolean hasTime() {
            return fieldSetFlags()[14];
        }


        /**
         * Clears the value of the 'time' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearTime() {
            time = null;
            fieldSetFlags()[14] = false;
            return this;
        }

        /**
         * Gets the value of the 'index' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getIndex() {
            return index;
        }


        /**
         * Sets the value of the 'index' field.
         *
         * @param value The value of 'index'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setIndex(java.lang.CharSequence value) {
            validate(fields()[15], value);
            this.index = value;
            fieldSetFlags()[15] = true;
            return this;
        }

        /**
         * Checks whether the 'index' field has been set.
         *
         * @return True if the 'index' field has been set, false otherwise.
         */
        public boolean hasIndex() {
            return fieldSetFlags()[15];
        }


        /**
         * Clears the value of the 'index' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearIndex() {
            index = null;
            fieldSetFlags()[15] = false;
            return this;
        }

        /**
         * Gets the value of the 'tc' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getTc() {
            return tc;
        }


        /**
         * Sets the value of the 'tc' field.
         *
         * @param value The value of 'tc'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setTc(java.lang.CharSequence value) {
            validate(fields()[16], value);
            this.tc = value;
            fieldSetFlags()[16] = true;
            return this;
        }

        /**
         * Checks whether the 'tc' field has been set.
         *
         * @return True if the 'tc' field has been set, false otherwise.
         */
        public boolean hasTc() {
            return fieldSetFlags()[16];
        }


        /**
         * Clears the value of the 'tc' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearTc() {
            tc = null;
            fieldSetFlags()[16] = false;
            return this;
        }

        /**
         * Gets the value of the 'ms' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getMs() {
            return ms;
        }


        /**
         * Sets the value of the 'ms' field.
         *
         * @param value The value of 'ms'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setMs(java.lang.CharSequence value) {
            validate(fields()[17], value);
            this.ms = value;
            fieldSetFlags()[17] = true;
            return this;
        }

        /**
         * Checks whether the 'ms' field has been set.
         *
         * @return True if the 'ms' field has been set, false otherwise.
         */
        public boolean hasMs() {
            return fieldSetFlags()[17];
        }


        /**
         * Clears the value of the 'ms' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearMs() {
            ms = null;
            fieldSetFlags()[17] = false;
            return this;
        }

        /**
         * Gets the value of the 'type' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getType() {
            return type;
        }


        /**
         * Sets the value of the 'type' field.
         *
         * @param value The value of 'type'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder setType(java.lang.CharSequence value) {
            validate(fields()[18], value);
            this.type = value;
            fieldSetFlags()[18] = true;
            return this;
        }

        /**
         * Checks whether the 'type' field has been set.
         *
         * @return True if the 'type' field has been set, false otherwise.
         */
        public boolean hasType() {
            return fieldSetFlags()[18];
        }


        /**
         * Clears the value of the 'type' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frame.Builder clearType() {
            type = null;
            fieldSetFlags()[18] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Frame build() {
            try {
                Frame record = new Frame();
                record.orientation = fieldSetFlags()[0] ? this.orientation : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.position = fieldSetFlags()[1] ? this.position : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.velocity = fieldSetFlags()[2] ? this.velocity : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.acceleration = fieldSetFlags()[3] ? this.acceleration : (java.lang.CharSequence) defaultValue(fields()[3]);
                record.angularVelocity = fieldSetFlags()[4] ? this.angularVelocity : (java.lang.CharSequence) defaultValue(fields()[4]);
                record.angularAcceleration = fieldSetFlags()[5] ? this.angularAcceleration : (java.lang.CharSequence) defaultValue(fields()[5]);
                record.sensorAcceleration = fieldSetFlags()[6] ? this.sensorAcceleration : (java.lang.CharSequence) defaultValue(fields()[6]);
                record.sensorAngularVelocity = fieldSetFlags()[7] ? this.sensorAngularVelocity : (java.lang.CharSequence) defaultValue(fields()[7]);
                record.sensorMagneticField = fieldSetFlags()[8] ? this.sensorMagneticField : (java.lang.CharSequence) defaultValue(fields()[8]);
                record.sensorOrientation = fieldSetFlags()[9] ? this.sensorOrientation : (java.lang.CharSequence) defaultValue(fields()[9]);
                record.jointAngle = fieldSetFlags()[10] ? this.jointAngle : (java.lang.CharSequence) defaultValue(fields()[10]);
                record.jointAngleXZY = fieldSetFlags()[11] ? this.jointAngleXZY : (java.lang.CharSequence) defaultValue(fields()[11]);
                record.centerOfMass = fieldSetFlags()[12] ? this.centerOfMass : (java.lang.CharSequence) defaultValue(fields()[12]);
                record.marker = fieldSetFlags()[13] ? this.marker : (java.lang.CharSequence) defaultValue(fields()[13]);
                record.time = fieldSetFlags()[14] ? this.time : (java.lang.CharSequence) defaultValue(fields()[14]);
                record.index = fieldSetFlags()[15] ? this.index : (java.lang.CharSequence) defaultValue(fields()[15]);
                record.tc = fieldSetFlags()[16] ? this.tc : (java.lang.CharSequence) defaultValue(fields()[16]);
                record.ms = fieldSetFlags()[17] ? this.ms : (java.lang.CharSequence) defaultValue(fields()[17]);
                record.type = fieldSetFlags()[18] ? this.type : (java.lang.CharSequence) defaultValue(fields()[18]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










