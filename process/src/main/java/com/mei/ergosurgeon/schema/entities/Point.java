/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.mei.ergosurgeon.schema.entities;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Point extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Point\",\"namespace\":\"com.mei.ergosurgeon.schema.entities\",\"fields\":[{\"name\":\"posS\",\"type\":\"string\"},{\"name\":\"label\",\"type\":\"string\"}]}");
    private static final long serialVersionUID = 4923826300570171675L;
    private static SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<Point> ENCODER =
            new BinaryMessageEncoder<Point>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<Point> DECODER =
            new BinaryMessageDecoder<Point>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Point>
            WRITER$ = (org.apache.avro.io.DatumWriter<Point>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Point>
            READER$ = (org.apache.avro.io.DatumReader<Point>) MODEL$.createDatumReader(SCHEMA$);
    @Deprecated
    public java.lang.CharSequence posS;
    @Deprecated
    public java.lang.CharSequence label;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Point() {
    }

    /**
     * All-args constructor.
     * @param posS The new value for posS
     * @param label The new value for label
     */
    public Point(java.lang.CharSequence posS, java.lang.CharSequence label) {
        this.posS = posS;
        this.label = label;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     */
    public static BinaryMessageDecoder<Point> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     */
    public static BinaryMessageDecoder<Point> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Point>(MODEL$, SCHEMA$, resolver);
    }

    /** Deserializes a Point from a ByteBuffer. */
    public static Point fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new Point RecordBuilder.
     * @return A new Point RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Point.Builder newBuilder() {
        return new com.mei.ergosurgeon.schema.entities.Point.Builder();
    }

    /**
     * Creates a new Point RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Point RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Point.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Point.Builder other) {
        return new com.mei.ergosurgeon.schema.entities.Point.Builder(other);
    }

    /**
     * Creates a new Point RecordBuilder by copying an existing Point instance.
     * @param other The existing instance to copy.
     * @return A new Point RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Point.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Point other) {
        return new com.mei.ergosurgeon.schema.entities.Point.Builder(other);
    }

    /** Serializes this Point to a ByteBuffer. */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return posS;
            case 1:
                return label;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                posS = (java.lang.CharSequence) value$;
                break;
            case 1:
                label = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'posS' field.
     * @return The value of the 'posS' field.
     */
    public java.lang.CharSequence getPosS() {
        return posS;
    }

    /**
     * Sets the value of the 'posS' field.
     * @param value the value to set.
     */
    public void setPosS(java.lang.CharSequence value) {
        this.posS = value;
    }

    /**
     * Gets the value of the 'label' field.
     * @return The value of the 'label' field.
     */
    public java.lang.CharSequence getLabel() {
        return label;
    }

    /**
     * Sets the value of the 'label' field.
     * @param value the value to set.
     */
    public void setLabel(java.lang.CharSequence value) {
        this.label = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    /**
     * RecordBuilder for Point instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Point>
            implements org.apache.avro.data.RecordBuilder<Point> {

        private java.lang.CharSequence posS;
        private java.lang.CharSequence label;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.mei.ergosurgeon.schema.entities.Point.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.posS)) {
                this.posS = data().deepCopy(fields()[0].schema(), other.posS);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.label)) {
                this.label = data().deepCopy(fields()[1].schema(), other.label);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing Point instance
         * @param other The existing instance to copy.
         */
        private Builder(com.mei.ergosurgeon.schema.entities.Point other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.posS)) {
                this.posS = data().deepCopy(fields()[0].schema(), other.posS);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.label)) {
                this.label = data().deepCopy(fields()[1].schema(), other.label);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'posS' field.
         * @return The value.
         */
        public java.lang.CharSequence getPosS() {
            return posS;
        }

        /**
         * Sets the value of the 'posS' field.
         * @param value The value of 'posS'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Point.Builder setPosS(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.posS = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'posS' field has been set.
         * @return True if the 'posS' field has been set, false otherwise.
         */
        public boolean hasPosS() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'posS' field.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Point.Builder clearPosS() {
            posS = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'label' field.
         * @return The value.
         */
        public java.lang.CharSequence getLabel() {
            return label;
        }

        /**
         * Sets the value of the 'label' field.
         * @param value The value of 'label'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Point.Builder setLabel(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.label = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'label' field has been set.
         * @return True if the 'label' field has been set, false otherwise.
         */
        public boolean hasLabel() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'label' field.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Point.Builder clearLabel() {
            label = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Point build() {
            try {
                Point record = new Point();
                record.posS = fieldSetFlags()[0] ? this.posS : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.label = fieldSetFlags()[1] ? this.label : (java.lang.CharSequence) defaultValue(fields()[1]);
                return record;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

}
