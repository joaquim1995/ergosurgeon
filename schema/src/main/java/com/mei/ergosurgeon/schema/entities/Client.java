/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mei.ergosurgeon.schema.entities;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Client extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Client\",\"namespace\":\"com.mei.ergosurgeon.schema.entities\",\"fields\":[{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"dateStart\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"dateEnd\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
    private static final long serialVersionUID = 6948522072762930580L;
    private static final org.apache.avro.Conversion<?>[] conversions =
            new org.apache.avro.Conversion<?>[]{
                    null,
                    null,
                    new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
                    new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
                    null
            };
    private static SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<Client> ENCODER =
            new BinaryMessageEncoder<Client>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<Client> DECODER =
            new BinaryMessageDecoder<Client>(MODEL$, SCHEMA$);

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    @Deprecated
    public java.lang.CharSequence email;

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Client> getDecoder() {
        return DECODER;
    }

    /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Client> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Client>(MODEL$, SCHEMA$, resolver);
  }

    /**
     * Serializes this Client to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    @Deprecated
    public java.lang.CharSequence uuid;
    @Deprecated
    public java.time.Instant dateStart;
    @Deprecated
    public java.time.Instant dateEnd;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Client() {
    }

    /**
     * All-args constructor.
     *
     * @param email     The new value for email
     * @param uuid      The new value for uuid
     * @param dateStart The new value for dateStart
     * @param dateEnd   The new value for dateEnd
     */
    public Client(java.lang.CharSequence email, java.lang.CharSequence uuid, java.time.Instant dateStart, java.time.Instant dateEnd) {
        this.email = email;
        this.uuid = uuid;
        this.dateStart = dateStart.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.dateEnd = dateEnd.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Client> getEncoder() {
        return ENCODER;
    }

    /**
     * Deserializes a Client from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Client instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Client fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new Client RecordBuilder by copying an existing Client instance.
     *
     * @param other The existing instance to copy.
     * @return A new Client RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Client.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Client other) {
        if (other == null) {
            return new com.mei.ergosurgeon.schema.entities.Client.Builder();
        } else {
            return new com.mei.ergosurgeon.schema.entities.Client.Builder(other);
        }
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return email;
            case 1:
                return uuid;
            case 2:
                return dateStart;
            case 3:
                return dateEnd;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    /**
     * Gets the value of the 'email' field.
     *
     * @return The value of the 'email' field.
     */
    public java.lang.CharSequence getEmail() {
        return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
      this.email = value;
  }

    /**
     * Gets the value of the 'uuid' field.
     *
     * @return The value of the 'uuid' field.
     */
    public java.lang.CharSequence getUuid() {
        return uuid;
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                email = (java.lang.CharSequence) value$;
                break;
            case 1:
                uuid = (java.lang.CharSequence) value$;
                break;
            case 2:
                dateStart = (java.time.Instant) value$;
                break;
            case 3:
                dateEnd = (java.time.Instant) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Sets the value of the 'uuid' field.
     *
     * @param value the value to set.
     */
    public void setUuid(java.lang.CharSequence value) {
        this.uuid = value;
    }

    /**
     * Gets the value of the 'dateStart' field.
     *
     * @return The value of the 'dateStart' field.
     */
    public java.time.Instant getDateStart() {
        return dateStart;
    }

    /**
     * Sets the value of the 'dateStart' field.
     *
     * @param value the value to set.
     */
    public void setDateStart(java.time.Instant value) {
        this.dateStart = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'dateEnd' field.
     *
     * @return The value of the 'dateEnd' field.
     */
    public java.time.Instant getDateEnd() {
        return dateEnd;
    }

    /**
     * Creates a new Client RecordBuilder.
     *
     * @return A new Client RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Client.Builder newBuilder() {
    return new com.mei.ergosurgeon.schema.entities.Client.Builder();
  }

  /**
   * Creates a new Client RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Client RecordBuilder
   */
  public static com.mei.ergosurgeon.schema.entities.Client.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Client.Builder other) {
      if (other == null) {
          return new com.mei.ergosurgeon.schema.entities.Client.Builder();
      } else {
          return new com.mei.ergosurgeon.schema.entities.Client.Builder(other);
      }
  }

    /**
     * Sets the value of the 'dateEnd' field.
     *
     * @param value the value to set.
     */
    public void setDateEnd(java.time.Instant value) {
        this.dateEnd = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * RecordBuilder for Client instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Client>
            implements org.apache.avro.data.RecordBuilder<Client> {

        private java.lang.CharSequence email;
        private java.lang.CharSequence uuid;
        private java.time.Instant dateStart;
        private java.time.Instant dateEnd;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.mei.ergosurgeon.schema.entities.Client.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.email)) {
                this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.uuid)) {
        this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.dateStart)) {
        this.dateStart = data().deepCopy(fields()[2].schema(), other.dateStart);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.dateEnd)) {
        this.dateEnd = data().deepCopy(fields()[3].schema(), other.dateEnd);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Client instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mei.ergosurgeon.schema.entities.Client other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uuid)) {
        this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dateStart)) {
        this.dateStart = data().deepCopy(fields()[2].schema(), other.dateStart);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dateEnd)) {
        this.dateEnd = data().deepCopy(fields()[3].schema(), other.dateEnd);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Client.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.email = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Client.Builder clearEmail() {
      email = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Client.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.uuid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

        /**
         * Checks whether the 'uuid' field has been set.
         *
         * @return True if the 'uuid' field has been set, false otherwise.
         */
        public boolean hasUuid() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'uuid' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Client.Builder clearUuid() {
            uuid = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'dateStart' field.
         *
         * @return The value.
         */
        public java.time.Instant getDateStart() {
            return dateStart;
        }


        /**
         * Sets the value of the 'dateStart' field.
         *
         * @param value The value of 'dateStart'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Client.Builder setDateStart(java.time.Instant value) {
            validate(fields()[2], value);
            this.dateStart = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'dateStart' field has been set.
         *
         * @return True if the 'dateStart' field has been set, false otherwise.
         */
        public boolean hasDateStart() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'dateStart' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Client.Builder clearDateStart() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'dateEnd' field.
         *
         * @return The value.
         */
        public java.time.Instant getDateEnd() {
            return dateEnd;
        }


        /**
         * Sets the value of the 'dateEnd' field.
         *
         * @param value The value of 'dateEnd'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Client.Builder setDateEnd(java.time.Instant value) {
            validate(fields()[3], value);
            this.dateEnd = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'dateEnd' field has been set.
         *
         * @return True if the 'dateEnd' field has been set, false otherwise.
         */
        public boolean hasDateEnd() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'dateEnd' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Client.Builder clearDateEnd() {
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Client build() {
            try {
                Client record = new Client();
                record.email = fieldSetFlags()[0] ? this.email : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.uuid = fieldSetFlags()[1] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.dateStart = fieldSetFlags()[2] ? this.dateStart : (java.time.Instant) defaultValue(fields()[2]);
        record.dateEnd = fieldSetFlags()[3] ? this.dateEnd : (java.time.Instant) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Client>
    WRITER$ = (org.apache.avro.io.DatumWriter<Client>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Client>
    READER$ = (org.apache.avro.io.DatumReader<Client>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










