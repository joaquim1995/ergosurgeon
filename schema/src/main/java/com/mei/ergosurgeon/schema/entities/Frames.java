/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mei.ergosurgeon.schema.entities;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Frames extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Frames\",\"namespace\":\"com.mei.ergosurgeon.schema.entities\",\"fields\":[{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"segmentCount\",\"type\":\"string\"},{\"name\":\"sensorCount\",\"type\":[\"null\",\"string\"]},{\"name\":\"jointCount\",\"type\":[\"null\",\"string\"]}]}");
    private static final long serialVersionUID = 237982819346551794L;
    private static SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<Frames> ENCODER =
            new BinaryMessageEncoder<Frames>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<Frames> DECODER =
            new BinaryMessageDecoder<Frames>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Frames>
            WRITER$ = (org.apache.avro.io.DatumWriter<Frames>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Frames>
            READER$ = (org.apache.avro.io.DatumReader<Frames>) MODEL$.createDatumReader(SCHEMA$);
    @Deprecated
    public java.lang.CharSequence email;
    @Deprecated
    public java.lang.CharSequence uuid;
    @Deprecated
    public long id;
    @Deprecated
    public java.lang.CharSequence segmentCount;
    @Deprecated
    public java.lang.CharSequence sensorCount;
    @Deprecated
    public java.lang.CharSequence jointCount;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Frames() {
    }

    /**
     * All-args constructor.
     *
     * @param email        The new value for email
     * @param uuid         The new value for uuid
     * @param id           The new value for id
     * @param segmentCount The new value for segmentCount
     * @param sensorCount  The new value for sensorCount
     * @param jointCount   The new value for jointCount
     */
    public Frames(java.lang.CharSequence email, java.lang.CharSequence uuid, java.lang.Long id, java.lang.CharSequence segmentCount, java.lang.CharSequence sensorCount, java.lang.CharSequence jointCount) {
        this.email = email;
        this.uuid = uuid;
        this.id = id;
        this.segmentCount = segmentCount;
        this.sensorCount = sensorCount;
        this.jointCount = jointCount;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Frames> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Frames> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Frames> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Frames>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a Frames from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Frames instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Frames fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new Frames RecordBuilder.
     *
     * @return A new Frames RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Frames.Builder newBuilder() {
        return new com.mei.ergosurgeon.schema.entities.Frames.Builder();
    }

    /**
     * Creates a new Frames RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new Frames RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Frames.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Frames.Builder other) {
        if (other == null) {
            return new com.mei.ergosurgeon.schema.entities.Frames.Builder();
        } else {
            return new com.mei.ergosurgeon.schema.entities.Frames.Builder(other);
        }
    }

    /**
     * Creates a new Frames RecordBuilder by copying an existing Frames instance.
     *
     * @param other The existing instance to copy.
     * @return A new Frames RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Frames.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Frames other) {
        if (other == null) {
            return new com.mei.ergosurgeon.schema.entities.Frames.Builder();
        } else {
            return new com.mei.ergosurgeon.schema.entities.Frames.Builder(other);
        }
    }

    /**
     * Serializes this Frames to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return email;
            case 1:
                return uuid;
            case 2:
                return id;
            case 3:
                return segmentCount;
            case 4:
                return sensorCount;
            case 5:
                return jointCount;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                email = (java.lang.CharSequence) value$;
                break;
            case 1:
                uuid = (java.lang.CharSequence) value$;
                break;
            case 2:
                id = (java.lang.Long) value$;
                break;
            case 3:
                segmentCount = (java.lang.CharSequence) value$;
                break;
            case 4:
                sensorCount = (java.lang.CharSequence) value$;
                break;
            case 5:
                jointCount = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'email' field.
     *
     * @return The value of the 'email' field.
     */
    public java.lang.CharSequence getEmail() {
        return email;
    }

    /**
     * Sets the value of the 'email' field.
     *
     * @param value the value to set.
     */
    public void setEmail(java.lang.CharSequence value) {
        this.email = value;
    }

    /**
     * Gets the value of the 'uuid' field.
     *
     * @return The value of the 'uuid' field.
     */
    public java.lang.CharSequence getUuid() {
        return uuid;
    }

    /**
     * Sets the value of the 'uuid' field.
     *
     * @param value the value to set.
     */
    public void setUuid(java.lang.CharSequence value) {
        this.uuid = value;
    }

    /**
     * Gets the value of the 'id' field.
     *
     * @return The value of the 'id' field.
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     *
     * @param value the value to set.
     */
    public void setId(long value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'segmentCount' field.
     *
     * @return The value of the 'segmentCount' field.
     */
    public java.lang.CharSequence getSegmentCount() {
        return segmentCount;
    }

    /**
     * Sets the value of the 'segmentCount' field.
     *
     * @param value the value to set.
     */
    public void setSegmentCount(java.lang.CharSequence value) {
        this.segmentCount = value;
    }

    /**
     * Gets the value of the 'sensorCount' field.
     *
     * @return The value of the 'sensorCount' field.
     */
    public java.lang.CharSequence getSensorCount() {
        return sensorCount;
    }

    /**
     * Sets the value of the 'sensorCount' field.
     *
     * @param value the value to set.
     */
    public void setSensorCount(java.lang.CharSequence value) {
        this.sensorCount = value;
    }

    /**
     * Gets the value of the 'jointCount' field.
     *
     * @return The value of the 'jointCount' field.
     */
    public java.lang.CharSequence getJointCount() {
        return jointCount;
    }

    /**
     * Sets the value of the 'jointCount' field.
     *
     * @param value the value to set.
     */
    public void setJointCount(java.lang.CharSequence value) {
        this.jointCount = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.email);

        out.writeString(this.uuid);

        out.writeLong(this.id);

        out.writeString(this.segmentCount);

        if (this.sensorCount == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.sensorCount);
        }

        if (this.jointCount == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.jointCount);
        }

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.email = in.readString(this.email instanceof Utf8 ? (Utf8) this.email : null);

            this.uuid = in.readString(this.uuid instanceof Utf8 ? (Utf8) this.uuid : null);

            this.id = in.readLong();

            this.segmentCount = in.readString(this.segmentCount instanceof Utf8 ? (Utf8) this.segmentCount : null);

            if (in.readIndex() != 1) {
                in.readNull();
                this.sensorCount = null;
            } else {
                this.sensorCount = in.readString(this.sensorCount instanceof Utf8 ? (Utf8) this.sensorCount : null);
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.jointCount = null;
            } else {
                this.jointCount = in.readString(this.jointCount instanceof Utf8 ? (Utf8) this.jointCount : null);
            }

        } else {
            for (int i = 0; i < 6; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.email = in.readString(this.email instanceof Utf8 ? (Utf8) this.email : null);
                        break;

                    case 1:
                        this.uuid = in.readString(this.uuid instanceof Utf8 ? (Utf8) this.uuid : null);
                        break;

                    case 2:
                        this.id = in.readLong();
                        break;

                    case 3:
                        this.segmentCount = in.readString(this.segmentCount instanceof Utf8 ? (Utf8) this.segmentCount : null);
                        break;

                    case 4:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.sensorCount = null;
                        } else {
                            this.sensorCount = in.readString(this.sensorCount instanceof Utf8 ? (Utf8) this.sensorCount : null);
                        }
                        break;

                    case 5:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.jointCount = null;
                        } else {
                            this.jointCount = in.readString(this.jointCount instanceof Utf8 ? (Utf8) this.jointCount : null);
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for Frames instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Frames>
            implements org.apache.avro.data.RecordBuilder<Frames> {

        private java.lang.CharSequence email;
        private java.lang.CharSequence uuid;
        private long id;
        private java.lang.CharSequence segmentCount;
        private java.lang.CharSequence sensorCount;
        private java.lang.CharSequence jointCount;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(com.mei.ergosurgeon.schema.entities.Frames.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.email)) {
                this.email = data().deepCopy(fields()[0].schema(), other.email);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.uuid)) {
                this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.id)) {
                this.id = data().deepCopy(fields()[2].schema(), other.id);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.segmentCount)) {
                this.segmentCount = data().deepCopy(fields()[3].schema(), other.segmentCount);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.sensorCount)) {
                this.sensorCount = data().deepCopy(fields()[4].schema(), other.sensorCount);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.jointCount)) {
                this.jointCount = data().deepCopy(fields()[5].schema(), other.jointCount);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
        }

        /**
         * Creates a Builder by copying an existing Frames instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(com.mei.ergosurgeon.schema.entities.Frames other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.email)) {
                this.email = data().deepCopy(fields()[0].schema(), other.email);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.uuid)) {
                this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.id)) {
                this.id = data().deepCopy(fields()[2].schema(), other.id);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.segmentCount)) {
                this.segmentCount = data().deepCopy(fields()[3].schema(), other.segmentCount);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.sensorCount)) {
                this.sensorCount = data().deepCopy(fields()[4].schema(), other.sensorCount);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.jointCount)) {
                this.jointCount = data().deepCopy(fields()[5].schema(), other.jointCount);
                fieldSetFlags()[5] = true;
            }
        }

        /**
         * Gets the value of the 'email' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getEmail() {
            return email;
        }


        /**
         * Sets the value of the 'email' field.
         *
         * @param value The value of 'email'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder setEmail(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.email = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'email' field has been set.
         *
         * @return True if the 'email' field has been set, false otherwise.
         */
        public boolean hasEmail() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'email' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder clearEmail() {
            email = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'uuid' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getUuid() {
            return uuid;
        }


        /**
         * Sets the value of the 'uuid' field.
         *
         * @param value The value of 'uuid'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder setUuid(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.uuid = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'uuid' field has been set.
         *
         * @return True if the 'uuid' field has been set, false otherwise.
         */
        public boolean hasUuid() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'uuid' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder clearUuid() {
            uuid = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'id' field.
         *
         * @return The value.
         */
        public long getId() {
            return id;
        }


        /**
         * Sets the value of the 'id' field.
         *
         * @param value The value of 'id'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder setId(long value) {
            validate(fields()[2], value);
            this.id = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         *
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'id' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder clearId() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'segmentCount' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getSegmentCount() {
            return segmentCount;
        }


        /**
         * Sets the value of the 'segmentCount' field.
         *
         * @param value The value of 'segmentCount'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder setSegmentCount(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.segmentCount = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'segmentCount' field has been set.
         *
         * @return True if the 'segmentCount' field has been set, false otherwise.
         */
        public boolean hasSegmentCount() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'segmentCount' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder clearSegmentCount() {
            segmentCount = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'sensorCount' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getSensorCount() {
            return sensorCount;
        }


        /**
         * Sets the value of the 'sensorCount' field.
         *
         * @param value The value of 'sensorCount'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder setSensorCount(java.lang.CharSequence value) {
            validate(fields()[4], value);
            this.sensorCount = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'sensorCount' field has been set.
         *
         * @return True if the 'sensorCount' field has been set, false otherwise.
         */
        public boolean hasSensorCount() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'sensorCount' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder clearSensorCount() {
            sensorCount = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'jointCount' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getJointCount() {
            return jointCount;
        }


        /**
         * Sets the value of the 'jointCount' field.
         *
         * @param value The value of 'jointCount'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder setJointCount(java.lang.CharSequence value) {
            validate(fields()[5], value);
            this.jointCount = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'jointCount' field has been set.
         *
         * @return True if the 'jointCount' field has been set, false otherwise.
         */
        public boolean hasJointCount() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'jointCount' field.
         *
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Frames.Builder clearJointCount() {
            jointCount = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Frames build() {
            try {
                Frames record = new Frames();
                record.email = fieldSetFlags()[0] ? this.email : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.uuid = fieldSetFlags()[1] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.id = fieldSetFlags()[2] ? this.id : (java.lang.Long) defaultValue(fields()[2]);
                record.segmentCount = fieldSetFlags()[3] ? this.segmentCount : (java.lang.CharSequence) defaultValue(fields()[3]);
                record.sensorCount = fieldSetFlags()[4] ? this.sensorCount : (java.lang.CharSequence) defaultValue(fields()[4]);
                record.jointCount = fieldSetFlags()[5] ? this.jointCount : (java.lang.CharSequence) defaultValue(fields()[5]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










