/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.mei.ergosurgeon.schema.entities;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Mvnx extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Mvnx\",\"namespace\":\"com.mei.ergosurgeon.schema.entities\",\"fields\":[{\"name\":\"comment\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"}]}");
    private static final long serialVersionUID = -6024554668817227399L;
    private static SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<Mvnx> ENCODER =
            new BinaryMessageEncoder<Mvnx>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<Mvnx> DECODER =
            new BinaryMessageDecoder<Mvnx>(MODEL$, SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Mvnx>
            WRITER$ = (org.apache.avro.io.DatumWriter<Mvnx>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Mvnx>
            READER$ = (org.apache.avro.io.DatumReader<Mvnx>) MODEL$.createDatumReader(SCHEMA$);
    @Deprecated
    public java.lang.CharSequence comment;
    @Deprecated
    public java.lang.CharSequence version;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Mvnx() {
    }

    /**
     * All-args constructor.
     * @param comment The new value for comment
     * @param version The new value for version
     */
    public Mvnx(java.lang.CharSequence comment, java.lang.CharSequence version) {
        this.comment = comment;
        this.version = version;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<Mvnx> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<Mvnx> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<Mvnx> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Mvnx>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a Mvnx from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a Mvnx instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static Mvnx fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new Mvnx RecordBuilder.
     * @return A new Mvnx RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Mvnx.Builder newBuilder() {
        return new com.mei.ergosurgeon.schema.entities.Mvnx.Builder();
    }

    /**
     * Creates a new Mvnx RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Mvnx RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Mvnx.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Mvnx.Builder other) {
        if (other == null) {
            return new com.mei.ergosurgeon.schema.entities.Mvnx.Builder();
        } else {
            return new com.mei.ergosurgeon.schema.entities.Mvnx.Builder(other);
        }
    }

    /**
     * Creates a new Mvnx RecordBuilder by copying an existing Mvnx instance.
     * @param other The existing instance to copy.
     * @return A new Mvnx RecordBuilder
     */
    public static com.mei.ergosurgeon.schema.entities.Mvnx.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Mvnx other) {
        if (other == null) {
            return new com.mei.ergosurgeon.schema.entities.Mvnx.Builder();
        } else {
            return new com.mei.ergosurgeon.schema.entities.Mvnx.Builder(other);
        }
    }

    /**
     * Serializes this Mvnx to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return comment;
            case 1:
                return version;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                comment = (java.lang.CharSequence) value$;
                break;
            case 1:
                version = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'comment' field.
     * @return The value of the 'comment' field.
     */
    public java.lang.CharSequence getComment() {
        return comment;
    }

    /**
     * Sets the value of the 'comment' field.
     * @param value the value to set.
     */
    public void setComment(java.lang.CharSequence value) {
        this.comment = value;
    }

    /**
     * Gets the value of the 'version' field.
     * @return The value of the 'version' field.
     */
    public java.lang.CharSequence getVersion() {
        return version;
    }

    /**
     * Sets the value of the 'version' field.
     * @param value the value to set.
     */
    public void setVersion(java.lang.CharSequence value) {
        this.version = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out)
            throws java.io.IOException {
        out.writeString(this.comment);

        out.writeString(this.version);

    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in)
            throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.comment = in.readString(this.comment instanceof Utf8 ? (Utf8) this.comment : null);

            this.version = in.readString(this.version instanceof Utf8 ? (Utf8) this.version : null);

        } else {
            for (int i = 0; i < 2; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.comment = in.readString(this.comment instanceof Utf8 ? (Utf8) this.comment : null);
                        break;

                    case 1:
                        this.version = in.readString(this.version instanceof Utf8 ? (Utf8) this.version : null);
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }

    /**
     * RecordBuilder for Mvnx instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Mvnx>
            implements org.apache.avro.data.RecordBuilder<Mvnx> {

        private java.lang.CharSequence comment;
        private java.lang.CharSequence version;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.mei.ergosurgeon.schema.entities.Mvnx.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.comment)) {
                this.comment = data().deepCopy(fields()[0].schema(), other.comment);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.version)) {
                this.version = data().deepCopy(fields()[1].schema(), other.version);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
        }

        /**
         * Creates a Builder by copying an existing Mvnx instance
         * @param other The existing instance to copy.
         */
        private Builder(com.mei.ergosurgeon.schema.entities.Mvnx other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.comment)) {
                this.comment = data().deepCopy(fields()[0].schema(), other.comment);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.version)) {
                this.version = data().deepCopy(fields()[1].schema(), other.version);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'comment' field.
         * @return The value.
         */
        public java.lang.CharSequence getComment() {
            return comment;
        }


        /**
         * Sets the value of the 'comment' field.
         * @param value The value of 'comment'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Mvnx.Builder setComment(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.comment = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'comment' field has been set.
         * @return True if the 'comment' field has been set, false otherwise.
         */
        public boolean hasComment() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'comment' field.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Mvnx.Builder clearComment() {
            comment = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'version' field.
         * @return The value.
         */
        public java.lang.CharSequence getVersion() {
            return version;
        }


        /**
         * Sets the value of the 'version' field.
         * @param value The value of 'version'.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Mvnx.Builder setVersion(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.version = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'version' field has been set.
         * @return True if the 'version' field has been set, false otherwise.
         */
        public boolean hasVersion() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'version' field.
         * @return This builder.
         */
        public com.mei.ergosurgeon.schema.entities.Mvnx.Builder clearVersion() {
            version = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Mvnx build() {
            try {
                Mvnx record = new Mvnx();
                record.comment = fieldSetFlags()[0] ? this.comment : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.version = fieldSetFlags()[1] ? this.version : (java.lang.CharSequence) defaultValue(fields()[1]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}










