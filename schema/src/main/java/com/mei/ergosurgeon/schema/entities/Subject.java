/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mei.ergosurgeon.schema.entities;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Subject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4038772881965149699L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Subject\",\"namespace\":\"com.mei.ergosurgeon.schema.entities\",\"fields\":[{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"comment\",\"type\":[\"null\",\"string\"]},{\"name\":\"label\",\"type\":[\"null\",\"string\"]},{\"name\":\"torsoColor\",\"type\":[\"null\",\"string\"]},{\"name\":\"frameRate\",\"type\":\"long\"},{\"name\":\"segmentCount\",\"type\":[\"null\",\"string\"]},{\"name\":\"recDate\",\"type\":[\"null\",\"string\"]},{\"name\":\"originalFilename\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Subject> ENCODER =
      new BinaryMessageEncoder<Subject>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Subject> DECODER =
      new BinaryMessageDecoder<Subject>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Subject> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Subject> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Subject> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Subject>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Subject to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Subject from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Subject instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Subject fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence email;
  @Deprecated public java.lang.CharSequence uuid;
  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence comment;
  @Deprecated public java.lang.CharSequence label;
  @Deprecated public java.lang.CharSequence torsoColor;
  @Deprecated public long frameRate;
  @Deprecated public java.lang.CharSequence segmentCount;
  @Deprecated public java.lang.CharSequence recDate;
  @Deprecated public java.lang.CharSequence originalFilename;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Subject() {}

  /**
   * All-args constructor.
   * @param email The new value for email
   * @param uuid The new value for uuid
   * @param id The new value for id
   * @param comment The new value for comment
   * @param label The new value for label
   * @param torsoColor The new value for torsoColor
   * @param frameRate The new value for frameRate
   * @param segmentCount The new value for segmentCount
   * @param recDate The new value for recDate
   * @param originalFilename The new value for originalFilename
   */
  public Subject(java.lang.CharSequence email, java.lang.CharSequence uuid, java.lang.Long id, java.lang.CharSequence comment, java.lang.CharSequence label, java.lang.CharSequence torsoColor, java.lang.Long frameRate, java.lang.CharSequence segmentCount, java.lang.CharSequence recDate, java.lang.CharSequence originalFilename) {
    this.email = email;
    this.uuid = uuid;
    this.id = id;
    this.comment = comment;
    this.label = label;
    this.torsoColor = torsoColor;
    this.frameRate = frameRate;
    this.segmentCount = segmentCount;
    this.recDate = recDate;
    this.originalFilename = originalFilename;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return email;
    case 1: return uuid;
    case 2: return id;
    case 3: return comment;
    case 4: return label;
    case 5: return torsoColor;
    case 6: return frameRate;
    case 7: return segmentCount;
    case 8: return recDate;
    case 9: return originalFilename;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: email = (java.lang.CharSequence)value$; break;
    case 1: uuid = (java.lang.CharSequence)value$; break;
    case 2: id = (java.lang.Long)value$; break;
    case 3: comment = (java.lang.CharSequence)value$; break;
    case 4: label = (java.lang.CharSequence)value$; break;
    case 5: torsoColor = (java.lang.CharSequence)value$; break;
    case 6: frameRate = (java.lang.Long)value$; break;
    case 7: segmentCount = (java.lang.CharSequence)value$; break;
    case 8: recDate = (java.lang.CharSequence)value$; break;
    case 9: originalFilename = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'comment' field.
   * @return The value of the 'comment' field.
   */
  public java.lang.CharSequence getComment() {
    return comment;
  }


  /**
   * Sets the value of the 'comment' field.
   * @param value the value to set.
   */
  public void setComment(java.lang.CharSequence value) {
    this.comment = value;
  }

  /**
   * Gets the value of the 'label' field.
   * @return The value of the 'label' field.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }


  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'torsoColor' field.
   * @return The value of the 'torsoColor' field.
   */
  public java.lang.CharSequence getTorsoColor() {
    return torsoColor;
  }


  /**
   * Sets the value of the 'torsoColor' field.
   * @param value the value to set.
   */
  public void setTorsoColor(java.lang.CharSequence value) {
    this.torsoColor = value;
  }

  /**
   * Gets the value of the 'frameRate' field.
   * @return The value of the 'frameRate' field.
   */
  public long getFrameRate() {
    return frameRate;
  }


  /**
   * Sets the value of the 'frameRate' field.
   * @param value the value to set.
   */
  public void setFrameRate(long value) {
    this.frameRate = value;
  }

  /**
   * Gets the value of the 'segmentCount' field.
   * @return The value of the 'segmentCount' field.
   */
  public java.lang.CharSequence getSegmentCount() {
    return segmentCount;
  }


  /**
   * Sets the value of the 'segmentCount' field.
   * @param value the value to set.
   */
  public void setSegmentCount(java.lang.CharSequence value) {
    this.segmentCount = value;
  }

  /**
   * Gets the value of the 'recDate' field.
   * @return The value of the 'recDate' field.
   */
  public java.lang.CharSequence getRecDate() {
    return recDate;
  }


  /**
   * Sets the value of the 'recDate' field.
   * @param value the value to set.
   */
  public void setRecDate(java.lang.CharSequence value) {
    this.recDate = value;
  }

  /**
   * Gets the value of the 'originalFilename' field.
   * @return The value of the 'originalFilename' field.
   */
  public java.lang.CharSequence getOriginalFilename() {
    return originalFilename;
  }


  /**
   * Sets the value of the 'originalFilename' field.
   * @param value the value to set.
   */
  public void setOriginalFilename(java.lang.CharSequence value) {
    this.originalFilename = value;
  }

  /**
   * Creates a new Subject RecordBuilder.
   * @return A new Subject RecordBuilder
   */
  public static com.mei.ergosurgeon.schema.entities.Subject.Builder newBuilder() {
    return new com.mei.ergosurgeon.schema.entities.Subject.Builder();
  }

  /**
   * Creates a new Subject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Subject RecordBuilder
   */
  public static com.mei.ergosurgeon.schema.entities.Subject.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Subject.Builder other) {
    if (other == null) {
      return new com.mei.ergosurgeon.schema.entities.Subject.Builder();
    } else {
      return new com.mei.ergosurgeon.schema.entities.Subject.Builder(other);
    }
  }

  /**
   * Creates a new Subject RecordBuilder by copying an existing Subject instance.
   * @param other The existing instance to copy.
   * @return A new Subject RecordBuilder
   */
  public static com.mei.ergosurgeon.schema.entities.Subject.Builder newBuilder(com.mei.ergosurgeon.schema.entities.Subject other) {
    if (other == null) {
      return new com.mei.ergosurgeon.schema.entities.Subject.Builder();
    } else {
      return new com.mei.ergosurgeon.schema.entities.Subject.Builder(other);
    }
  }

  /**
   * RecordBuilder for Subject instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Subject>
    implements org.apache.avro.data.RecordBuilder<Subject> {

    private java.lang.CharSequence email;
    private java.lang.CharSequence uuid;
    private long id;
    private java.lang.CharSequence comment;
    private java.lang.CharSequence label;
    private java.lang.CharSequence torsoColor;
    private long frameRate;
    private java.lang.CharSequence segmentCount;
    private java.lang.CharSequence recDate;
    private java.lang.CharSequence originalFilename;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mei.ergosurgeon.schema.entities.Subject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.uuid)) {
        this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.comment)) {
        this.comment = data().deepCopy(fields()[3].schema(), other.comment);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.label)) {
        this.label = data().deepCopy(fields()[4].schema(), other.label);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.torsoColor)) {
        this.torsoColor = data().deepCopy(fields()[5].schema(), other.torsoColor);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.frameRate)) {
        this.frameRate = data().deepCopy(fields()[6].schema(), other.frameRate);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.segmentCount)) {
        this.segmentCount = data().deepCopy(fields()[7].schema(), other.segmentCount);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.recDate)) {
        this.recDate = data().deepCopy(fields()[8].schema(), other.recDate);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.originalFilename)) {
        this.originalFilename = data().deepCopy(fields()[9].schema(), other.originalFilename);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing Subject instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mei.ergosurgeon.schema.entities.Subject other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uuid)) {
        this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.comment)) {
        this.comment = data().deepCopy(fields()[3].schema(), other.comment);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.label)) {
        this.label = data().deepCopy(fields()[4].schema(), other.label);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.torsoColor)) {
        this.torsoColor = data().deepCopy(fields()[5].schema(), other.torsoColor);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.frameRate)) {
        this.frameRate = data().deepCopy(fields()[6].schema(), other.frameRate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.segmentCount)) {
        this.segmentCount = data().deepCopy(fields()[7].schema(), other.segmentCount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.recDate)) {
        this.recDate = data().deepCopy(fields()[8].schema(), other.recDate);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.originalFilename)) {
        this.originalFilename = data().deepCopy(fields()[9].schema(), other.originalFilename);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.email = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder clearEmail() {
      email = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.uuid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder setId(long value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder clearId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'comment' field.
      * @return The value.
      */
    public java.lang.CharSequence getComment() {
      return comment;
    }


    /**
      * Sets the value of the 'comment' field.
      * @param value The value of 'comment'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder setComment(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.comment = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'comment' field has been set.
      * @return True if the 'comment' field has been set, false otherwise.
      */
    public boolean hasComment() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'comment' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder clearComment() {
      comment = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * @return The value.
      */
    public java.lang.CharSequence getLabel() {
      return label;
    }


    /**
      * Sets the value of the 'label' field.
      * @param value The value of 'label'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.label = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'label' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder clearLabel() {
      label = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'torsoColor' field.
      * @return The value.
      */
    public java.lang.CharSequence getTorsoColor() {
      return torsoColor;
    }


    /**
      * Sets the value of the 'torsoColor' field.
      * @param value The value of 'torsoColor'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder setTorsoColor(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.torsoColor = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'torsoColor' field has been set.
      * @return True if the 'torsoColor' field has been set, false otherwise.
      */
    public boolean hasTorsoColor() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'torsoColor' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder clearTorsoColor() {
      torsoColor = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'frameRate' field.
      * @return The value.
      */
    public long getFrameRate() {
      return frameRate;
    }


    /**
      * Sets the value of the 'frameRate' field.
      * @param value The value of 'frameRate'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder setFrameRate(long value) {
      validate(fields()[6], value);
      this.frameRate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'frameRate' field has been set.
      * @return True if the 'frameRate' field has been set, false otherwise.
      */
    public boolean hasFrameRate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'frameRate' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder clearFrameRate() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'segmentCount' field.
      * @return The value.
      */
    public java.lang.CharSequence getSegmentCount() {
      return segmentCount;
    }


    /**
      * Sets the value of the 'segmentCount' field.
      * @param value The value of 'segmentCount'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder setSegmentCount(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.segmentCount = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'segmentCount' field has been set.
      * @return True if the 'segmentCount' field has been set, false otherwise.
      */
    public boolean hasSegmentCount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'segmentCount' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder clearSegmentCount() {
      segmentCount = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'recDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getRecDate() {
      return recDate;
    }


    /**
      * Sets the value of the 'recDate' field.
      * @param value The value of 'recDate'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder setRecDate(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.recDate = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'recDate' field has been set.
      * @return True if the 'recDate' field has been set, false otherwise.
      */
    public boolean hasRecDate() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'recDate' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder clearRecDate() {
      recDate = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'originalFilename' field.
      * @return The value.
      */
    public java.lang.CharSequence getOriginalFilename() {
      return originalFilename;
    }


    /**
      * Sets the value of the 'originalFilename' field.
      * @param value The value of 'originalFilename'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder setOriginalFilename(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.originalFilename = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'originalFilename' field has been set.
      * @return True if the 'originalFilename' field has been set, false otherwise.
      */
    public boolean hasOriginalFilename() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'originalFilename' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.Subject.Builder clearOriginalFilename() {
      originalFilename = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Subject build() {
      try {
        Subject record = new Subject();
        record.email = fieldSetFlags()[0] ? this.email : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.uuid = fieldSetFlags()[1] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.Long) defaultValue(fields()[2]);
        record.comment = fieldSetFlags()[3] ? this.comment : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.label = fieldSetFlags()[4] ? this.label : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.torsoColor = fieldSetFlags()[5] ? this.torsoColor : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.frameRate = fieldSetFlags()[6] ? this.frameRate : (java.lang.Long) defaultValue(fields()[6]);
        record.segmentCount = fieldSetFlags()[7] ? this.segmentCount : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.recDate = fieldSetFlags()[8] ? this.recDate : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.originalFilename = fieldSetFlags()[9] ? this.originalFilename : (java.lang.CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Subject>
    WRITER$ = (org.apache.avro.io.DatumWriter<Subject>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Subject>
    READER$ = (org.apache.avro.io.DatumReader<Subject>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.email);

    out.writeString(this.uuid);

    out.writeLong(this.id);

    if (this.comment == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.comment);
    }

    if (this.label == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.label);
    }

    if (this.torsoColor == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.torsoColor);
    }

    out.writeLong(this.frameRate);

    if (this.segmentCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.segmentCount);
    }

    if (this.recDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.recDate);
    }

    out.writeString(this.originalFilename);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);

      this.uuid = in.readString(this.uuid instanceof Utf8 ? (Utf8)this.uuid : null);

      this.id = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.comment = null;
      } else {
        this.comment = in.readString(this.comment instanceof Utf8 ? (Utf8)this.comment : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.label = null;
      } else {
        this.label = in.readString(this.label instanceof Utf8 ? (Utf8)this.label : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.torsoColor = null;
      } else {
        this.torsoColor = in.readString(this.torsoColor instanceof Utf8 ? (Utf8)this.torsoColor : null);
      }

      this.frameRate = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.segmentCount = null;
      } else {
        this.segmentCount = in.readString(this.segmentCount instanceof Utf8 ? (Utf8)this.segmentCount : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.recDate = null;
      } else {
        this.recDate = in.readString(this.recDate instanceof Utf8 ? (Utf8)this.recDate : null);
      }

      this.originalFilename = in.readString(this.originalFilename instanceof Utf8 ? (Utf8)this.originalFilename : null);

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          break;

        case 1:
          this.uuid = in.readString(this.uuid instanceof Utf8 ? (Utf8)this.uuid : null);
          break;

        case 2:
          this.id = in.readLong();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.comment = null;
          } else {
            this.comment = in.readString(this.comment instanceof Utf8 ? (Utf8)this.comment : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.label = null;
          } else {
            this.label = in.readString(this.label instanceof Utf8 ? (Utf8)this.label : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.torsoColor = null;
          } else {
            this.torsoColor = in.readString(this.torsoColor instanceof Utf8 ? (Utf8)this.torsoColor : null);
          }
          break;

        case 6:
          this.frameRate = in.readLong();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.segmentCount = null;
          } else {
            this.segmentCount = in.readString(this.segmentCount instanceof Utf8 ? (Utf8)this.segmentCount : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.recDate = null;
          } else {
            this.recDate = in.readString(this.recDate instanceof Utf8 ? (Utf8)this.recDate : null);
          }
          break;

        case 9:
          this.originalFilename = in.readString(this.originalFilename instanceof Utf8 ? (Utf8)this.originalFilename : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










