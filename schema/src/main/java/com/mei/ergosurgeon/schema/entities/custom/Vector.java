/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.mei.ergosurgeon.schema.entities.custom;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Vector extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5401941047057311720L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Vector\",\"namespace\":\"com.mei.ergosurgeon.schema.entities.custom\",\"fields\":[{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"time\",\"type\":\"long\"},{\"name\":\"q0\",\"type\":\"float\"},{\"name\":\"q1\",\"type\":\"float\"},{\"name\":\"q2\",\"type\":\"float\"},{\"name\":\"segmentLabel\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Vector> ENCODER =
      new BinaryMessageEncoder<Vector>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Vector> DECODER =
      new BinaryMessageDecoder<Vector>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Vector> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Vector> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Vector> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Vector>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Vector to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Vector from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Vector instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Vector fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence email;
  @Deprecated public java.lang.CharSequence uuid;
  @Deprecated public long id;
  @Deprecated public long time;
  @Deprecated public float q0;
  @Deprecated public float q1;
  @Deprecated public float q2;
  @Deprecated public java.lang.CharSequence segmentLabel;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Vector() {}

  /**
   * All-args constructor.
   * @param email The new value for email
   * @param uuid The new value for uuid
   * @param id The new value for id
   * @param time The new value for time
   * @param q0 The new value for q0
   * @param q1 The new value for q1
   * @param q2 The new value for q2
   * @param segmentLabel The new value for segmentLabel
   */
  public Vector(java.lang.CharSequence email, java.lang.CharSequence uuid, java.lang.Long id, java.lang.Long time, java.lang.Float q0, java.lang.Float q1, java.lang.Float q2, java.lang.CharSequence segmentLabel) {
    this.email = email;
    this.uuid = uuid;
    this.id = id;
    this.time = time;
    this.q0 = q0;
    this.q1 = q1;
    this.q2 = q2;
    this.segmentLabel = segmentLabel;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return email;
    case 1: return uuid;
    case 2: return id;
    case 3: return time;
    case 4: return q0;
    case 5: return q1;
    case 6: return q2;
    case 7: return segmentLabel;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: email = (java.lang.CharSequence)value$; break;
    case 1: uuid = (java.lang.CharSequence)value$; break;
    case 2: id = (java.lang.Long)value$; break;
    case 3: time = (java.lang.Long)value$; break;
    case 4: q0 = (java.lang.Float)value$; break;
    case 5: q1 = (java.lang.Float)value$; break;
    case 6: q2 = (java.lang.Float)value$; break;
    case 7: segmentLabel = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'uuid' field.
   * @return The value of the 'uuid' field.
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }


  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public long getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(long value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'q0' field.
   * @return The value of the 'q0' field.
   */
  public float getQ0() {
    return q0;
  }


  /**
   * Sets the value of the 'q0' field.
   * @param value the value to set.
   */
  public void setQ0(float value) {
    this.q0 = value;
  }

  /**
   * Gets the value of the 'q1' field.
   * @return The value of the 'q1' field.
   */
  public float getQ1() {
    return q1;
  }


  /**
   * Sets the value of the 'q1' field.
   * @param value the value to set.
   */
  public void setQ1(float value) {
    this.q1 = value;
  }

  /**
   * Gets the value of the 'q2' field.
   * @return The value of the 'q2' field.
   */
  public float getQ2() {
    return q2;
  }


  /**
   * Sets the value of the 'q2' field.
   * @param value the value to set.
   */
  public void setQ2(float value) {
    this.q2 = value;
  }

  /**
   * Gets the value of the 'segmentLabel' field.
   * @return The value of the 'segmentLabel' field.
   */
  public java.lang.CharSequence getSegmentLabel() {
    return segmentLabel;
  }


  /**
   * Sets the value of the 'segmentLabel' field.
   * @param value the value to set.
   */
  public void setSegmentLabel(java.lang.CharSequence value) {
    this.segmentLabel = value;
  }

  /**
   * Creates a new Vector RecordBuilder.
   * @return A new Vector RecordBuilder
   */
  public static com.mei.ergosurgeon.schema.entities.custom.Vector.Builder newBuilder() {
    return new com.mei.ergosurgeon.schema.entities.custom.Vector.Builder();
  }

  /**
   * Creates a new Vector RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Vector RecordBuilder
   */
  public static com.mei.ergosurgeon.schema.entities.custom.Vector.Builder newBuilder(com.mei.ergosurgeon.schema.entities.custom.Vector.Builder other) {
    if (other == null) {
      return new com.mei.ergosurgeon.schema.entities.custom.Vector.Builder();
    } else {
      return new com.mei.ergosurgeon.schema.entities.custom.Vector.Builder(other);
    }
  }

  /**
   * Creates a new Vector RecordBuilder by copying an existing Vector instance.
   * @param other The existing instance to copy.
   * @return A new Vector RecordBuilder
   */
  public static com.mei.ergosurgeon.schema.entities.custom.Vector.Builder newBuilder(com.mei.ergosurgeon.schema.entities.custom.Vector other) {
    if (other == null) {
      return new com.mei.ergosurgeon.schema.entities.custom.Vector.Builder();
    } else {
      return new com.mei.ergosurgeon.schema.entities.custom.Vector.Builder(other);
    }
  }

  /**
   * RecordBuilder for Vector instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Vector>
    implements org.apache.avro.data.RecordBuilder<Vector> {

    private java.lang.CharSequence email;
    private java.lang.CharSequence uuid;
    private long id;
    private long time;
    private float q0;
    private float q1;
    private float q2;
    private java.lang.CharSequence segmentLabel;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.mei.ergosurgeon.schema.entities.custom.Vector.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.uuid)) {
        this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.q0)) {
        this.q0 = data().deepCopy(fields()[4].schema(), other.q0);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.q1)) {
        this.q1 = data().deepCopy(fields()[5].schema(), other.q1);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.q2)) {
        this.q2 = data().deepCopy(fields()[6].schema(), other.q2);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.segmentLabel)) {
        this.segmentLabel = data().deepCopy(fields()[7].schema(), other.segmentLabel);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Vector instance
     * @param other The existing instance to copy.
     */
    private Builder(com.mei.ergosurgeon.schema.entities.custom.Vector other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.email)) {
        this.email = data().deepCopy(fields()[0].schema(), other.email);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uuid)) {
        this.uuid = data().deepCopy(fields()[1].schema(), other.uuid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.time)) {
        this.time = data().deepCopy(fields()[3].schema(), other.time);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.q0)) {
        this.q0 = data().deepCopy(fields()[4].schema(), other.q0);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.q1)) {
        this.q1 = data().deepCopy(fields()[5].schema(), other.q1);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.q2)) {
        this.q2 = data().deepCopy(fields()[6].schema(), other.q2);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.segmentLabel)) {
        this.segmentLabel = data().deepCopy(fields()[7].schema(), other.segmentLabel);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.email = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder clearEmail() {
      email = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }


    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.uuid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder setId(long value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder clearId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public long getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder setTime(long value) {
      validate(fields()[3], value);
      this.time = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder clearTime() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'q0' field.
      * @return The value.
      */
    public float getQ0() {
      return q0;
    }


    /**
      * Sets the value of the 'q0' field.
      * @param value The value of 'q0'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder setQ0(float value) {
      validate(fields()[4], value);
      this.q0 = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'q0' field has been set.
      * @return True if the 'q0' field has been set, false otherwise.
      */
    public boolean hasQ0() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'q0' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder clearQ0() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'q1' field.
      * @return The value.
      */
    public float getQ1() {
      return q1;
    }


    /**
      * Sets the value of the 'q1' field.
      * @param value The value of 'q1'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder setQ1(float value) {
      validate(fields()[5], value);
      this.q1 = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'q1' field has been set.
      * @return True if the 'q1' field has been set, false otherwise.
      */
    public boolean hasQ1() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'q1' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder clearQ1() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'q2' field.
      * @return The value.
      */
    public float getQ2() {
      return q2;
    }


    /**
      * Sets the value of the 'q2' field.
      * @param value The value of 'q2'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder setQ2(float value) {
      validate(fields()[6], value);
      this.q2 = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'q2' field has been set.
      * @return True if the 'q2' field has been set, false otherwise.
      */
    public boolean hasQ2() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'q2' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder clearQ2() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'segmentLabel' field.
      * @return The value.
      */
    public java.lang.CharSequence getSegmentLabel() {
      return segmentLabel;
    }


    /**
      * Sets the value of the 'segmentLabel' field.
      * @param value The value of 'segmentLabel'.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder setSegmentLabel(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.segmentLabel = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'segmentLabel' field has been set.
      * @return True if the 'segmentLabel' field has been set, false otherwise.
      */
    public boolean hasSegmentLabel() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'segmentLabel' field.
      * @return This builder.
      */
    public com.mei.ergosurgeon.schema.entities.custom.Vector.Builder clearSegmentLabel() {
      segmentLabel = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Vector build() {
      try {
        Vector record = new Vector();
        record.email = fieldSetFlags()[0] ? this.email : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.uuid = fieldSetFlags()[1] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.Long) defaultValue(fields()[2]);
        record.time = fieldSetFlags()[3] ? this.time : (java.lang.Long) defaultValue(fields()[3]);
        record.q0 = fieldSetFlags()[4] ? this.q0 : (java.lang.Float) defaultValue(fields()[4]);
        record.q1 = fieldSetFlags()[5] ? this.q1 : (java.lang.Float) defaultValue(fields()[5]);
        record.q2 = fieldSetFlags()[6] ? this.q2 : (java.lang.Float) defaultValue(fields()[6]);
        record.segmentLabel = fieldSetFlags()[7] ? this.segmentLabel : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Vector>
    WRITER$ = (org.apache.avro.io.DatumWriter<Vector>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Vector>
    READER$ = (org.apache.avro.io.DatumReader<Vector>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.email);

    out.writeString(this.uuid);

    out.writeLong(this.id);

    out.writeLong(this.time);

    out.writeFloat(this.q0);

    out.writeFloat(this.q1);

    out.writeFloat(this.q2);

    out.writeString(this.segmentLabel);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);

      this.uuid = in.readString(this.uuid instanceof Utf8 ? (Utf8)this.uuid : null);

      this.id = in.readLong();

      this.time = in.readLong();

      this.q0 = in.readFloat();

      this.q1 = in.readFloat();

      this.q2 = in.readFloat();

      this.segmentLabel = in.readString(this.segmentLabel instanceof Utf8 ? (Utf8)this.segmentLabel : null);

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          break;

        case 1:
          this.uuid = in.readString(this.uuid instanceof Utf8 ? (Utf8)this.uuid : null);
          break;

        case 2:
          this.id = in.readLong();
          break;

        case 3:
          this.time = in.readLong();
          break;

        case 4:
          this.q0 = in.readFloat();
          break;

        case 5:
          this.q1 = in.readFloat();
          break;

        case 6:
          this.q2 = in.readFloat();
          break;

        case 7:
          this.segmentLabel = in.readString(this.segmentLabel instanceof Utf8 ? (Utf8)this.segmentLabel : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










